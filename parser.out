Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO
    IGNORE
    NEWLINE
    QUOT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA ID SEMICOLON programa2
Rule 2     programa2 -> declaracion programa2
Rule 3     programa2 -> np_gotoMain programa3
Rule 4     np_gotoMain -> <empty>
Rule 5     programa3 -> declaracionFuncion programa3
Rule 6     programa3 -> principal
Rule 7     principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas
Rule 8     np_updateMain -> <empty>
Rule 9     np_end -> <empty>
Rule 10    np_printTablas -> <empty>
Rule 11    declaracion -> VAR INT np_defineTipo COLON declaracion2
Rule 12    declaracion -> VAR FLOAT np_defineTipo COLON declaracion2
Rule 13    declaracion -> VAR CHAR np_defineTipo COLON declaracion2
Rule 14    np_defineTipo -> <empty>
Rule 15    declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3
Rule 16    declaracion3 -> np_quitarFondo SEMICOLON
Rule 17    declaracion3 -> np_quitarFondo COMA declaracion2
Rule 18    declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON
Rule 19    declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2
Rule 20    declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 21    declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 22    declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 23    declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 24    np_esParametro -> <empty>
Rule 25    np_yaNoEsParametro -> <empty>
Rule 26    np_endFunc -> <empty>
Rule 27    declaracionFuncionParametros -> empty
Rule 28    declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 29    declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 30    declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 31    declaracionFuncionParametros2 -> empty
Rule 32    declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 33    declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 34    declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 35    declaracionFuncionVariables -> empty
Rule 36    declaracionFuncionVariables -> declaracion
Rule 37    np_declfunc -> <empty>
Rule 38    np_declfuncprincipal -> <empty>
Rule 39    np_comienzaFunc -> <empty>
Rule 40    estatutos -> return estatutos
Rule 41    estatutos -> empty
Rule 42    estatutos -> declaracion estatutos
Rule 43    estatutos -> estatutoRepeticionIncondicional estatutos
Rule 44    estatutos -> estatutoRepeticionCondicional estatutos
Rule 45    estatutos -> lectura estatutos
Rule 46    estatutos -> asignacion estatutos
Rule 47    estatutos -> escritura estatutos
Rule 48    estatutos -> decision estatutos
Rule 49    estatutos -> llamadaFuncion SEMICOLON estatutos
Rule 50    escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
Rule 51    escritura2 -> empty
Rule 52    escritura2 -> np_agregarFondo expresion np_quitarFondo np_print escritura3
Rule 53    escritura2 -> STRING np_printStr escritura3
Rule 54    escritura3 -> empty
Rule 55    escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
Rule 56    escritura3 -> COMA STRING np_printStr escritura3
Rule 57    np_print -> <empty>
Rule 58    np_printStr -> <empty>
Rule 59    decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
Rule 60    decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
Rule 61    np_iniciaIf -> <empty>
Rule 62    np_terminaIf -> <empty>
Rule 63    np_iniciaElse -> <empty>
Rule 64    np_terminaElse -> <empty>
Rule 65    llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
Rule 66    np_existeFuncion -> <empty>
Rule 67    np_llamadaFuncion -> <empty>
Rule 68    np_agregarFondoParam -> <empty>
Rule 69    np_quitarFondoParam -> <empty>
Rule 70    paramsLlamada1 -> empty
Rule 71    paramsLlamada1 -> paramsLlamada2
Rule 72    paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam
Rule 73    paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
Rule 74    np_resolverParam -> <empty>
Rule 75    np_goSUB -> <empty>
Rule 76    lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
Rule 77    lectura2 -> empty
Rule 78    lectura2 -> COMA posibleID np_read lectura2
Rule 79    np_read -> <empty>
Rule 80    asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
Rule 81    expresion -> expresion LOGIC np_insertarOperador expresion
Rule 82    expresion -> expresion RELOP np_insertarOperador expresion
Rule 83    expresion -> termino
Rule 84    termino -> termino PLUS np_insertarOperador termino
Rule 85    termino -> termino MINUS np_insertarOperador termino
Rule 86    termino -> termino MULTIPLY np_insertarOperador termino
Rule 87    termino -> termino DIVIDE np_insertarOperador termino
Rule 88    np_insertarOperador -> <empty>
Rule 89    termino -> termino1 OPMATRIZ np_insertarOperador
Rule 90    termino -> termino1 np_updateUMINUSFALSE
Rule 91    np_updateUMINUSFALSE -> <empty>
Rule 92    np_updateUMINUSTRUE -> <empty>
Rule 93    termino1 -> posibleID
Rule 94    termino1 -> constante
Rule 95    termino1 -> CARACT np_addConstanteCHAR
Rule 96    termino1 -> llamadaFuncion
Rule 97    termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
Rule 98    constante -> ENTERO np_addConstanteINT
Rule 99    constante -> FLOTANTE np_addConstanteFLOAT
Rule 100   termino1 -> MINUS np_updateUMINUSTRUE constante
Rule 101   posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
Rule 102   posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH
Rule 103   posibleID2 -> np_enviarACuadruplos2
Rule 104   posibleID3 -> COMA np_agregarFondo expresion np_quitarFondo np_verificarD2 np_enviarACuadruplos4
Rule 105   posibleID3 -> np_enviarACuadruplos3
Rule 106   np_defIDActual -> <empty>
Rule 107   np_quitarIDActual -> <empty>
Rule 108   np_restarDimension0 -> <empty>
Rule 109   np_restarDimension1 -> <empty>
Rule 110   np_restarDimension2 -> <empty>
Rule 111   np_verificarD1 -> <empty>
Rule 112   np_verificarD2 -> <empty>
Rule 113   posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
Rule 114   posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
Rule 115   posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
Rule 116   np_asignarD1 -> <empty>
Rule 117   np_asignarD2 -> <empty>
Rule 118   np_asignarMemoria1 -> <empty>
Rule 119   np_asignarMemoria2 -> <empty>
Rule 120   estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
Rule 121   np_verificarValorUnico -> <empty>
Rule 122   np_iniciaFor -> <empty>
Rule 123   np_forFalso -> <empty>
Rule 124   np_terminaFor -> <empty>
Rule 125   estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
Rule 126   npWhileStExp -> <empty>
Rule 127   npWhileInicia -> <empty>
Rule 128   npWhileTermina -> <empty>
Rule 129   return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
Rule 130   return -> REGRESA SEMICOLON np_returnVOID
Rule 131   np_return -> <empty>
Rule 132   np_returnVOID -> <empty>
Rule 133   np_contieneID -> <empty>
Rule 134   np_addConstanteINT -> <empty>
Rule 135   np_addConstanteFLOAT -> <empty>
Rule 136   np_addConstanteCHAR -> <empty>
Rule 137   np_addVariableParametro -> <empty>
Rule 138   np_addVariable -> <empty>
Rule 139   np_enviarACuadruplos -> <empty>
Rule 140   np_enviarACuadruplos2 -> <empty>
Rule 141   np_enviarACuadruplos3 -> <empty>
Rule 142   np_enviarACuadruplos4 -> <empty>
Rule 143   np_enviarACuadruplosC -> <empty>
Rule 144   np_actualizarDimensiones -> <empty>
Rule 145   np_agregarFondo -> <empty>
Rule 146   np_quitarFondo -> <empty>
Rule 147   np_printCuadruplos -> <empty>
Rule 148   np_test -> <empty>
Rule 149   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 18 19 80
CARACT               : 95
CBRACKET             : 7 20 21 22 23 59 59 60 120 125
CCORCH               : 102 114 115
CHAR                 : 13 23 29 34
COLON                : 11 12 13
COMA                 : 17 19 32 33 34 55 56 73 78 104 115
COMENTARIO           : 
CPAREN               : 7 20 21 22 23 50 59 60 65 76 97 125
DESDE                : 120
DIVIDE               : 87
ENTERO               : 98 114 115 115
ENTONCES             : 59 60
ESCRIBE              : 50
FLOAT                : 12 22 30 33
FLOTANTE             : 99
FUNCION              : 20 21 22 23
HASTA                : 120
HAZ                  : 120 125
ID                   : 1 20 21 22 23 65 101 113 114 115 120
IGNORE               : 
INT                  : 11 21 28 32
LEE                  : 76
LOGIC                : 81
MIENTRAS             : 125
MINUS                : 85 100
MULTIPLY             : 86
NEWLINE              : 
OBRACKET             : 7 20 21 22 23 59 59 60 120 125
OCORCH               : 102 114 115
OPAREN               : 7 20 21 22 23 50 59 60 65 76 97 125
OPMATRIZ             : 89
PLUS                 : 84
PRINCIPAL            : 7
PROGRAMA             : 1
QUOT                 : 
REGRESA              : 129 130
RELOP                : 82
SEMICOLON            : 1 16 18 49 50 76 80 129 130
SI                   : 59 60
SINO                 : 59
STRING               : 53 56
VAR                  : 11 12 13
VOID                 : 20
error                : 

Nonterminals, with rules where they appear

asignacion           : 46
constante            : 94 100
decision             : 48
declaracion          : 2 36 42
declaracion2         : 11 12 13 17 19
declaracion3         : 15
declaracionFuncion   : 5
declaracionFuncionParametros : 20 21 22 23
declaracionFuncionParametros2 : 28 29 30 32 33 34
declaracionFuncionVariables : 20 21 22 23
empty                : 27 31 35 41 51 54 70 77
escritura            : 47
escritura2           : 50
escritura3           : 52 53 55 56
estatutoRepeticionCondicional : 44
estatutoRepeticionIncondicional : 43
estatutos            : 7 20 21 22 23 40 42 43 44 45 46 47 48 49 59 59 60 120 125
expresion            : 18 19 52 55 59 60 72 73 80 81 81 82 82 97 102 104 120 125 129
lectura              : 45
lectura2             : 76 78
llamadaFuncion       : 49 96
npWhileInicia        : 125
npWhileStExp         : 125
npWhileTermina       : 125
np_actualizarDimensiones : 113 114 115
np_addConstanteCHAR  : 95
np_addConstanteFLOAT : 99
np_addConstanteINT   : 98 114 115 115
np_addVariable       : 113 114 115
np_addVariableParametro : 
np_agregarFondo      : 15 28 29 30 32 33 34 52 55 59 59 60 72 73 80 80 102 104 120 125 129
np_agregarFondoParam : 65
np_asignarD1         : 114 115
np_asignarD2         : 115
np_asignarMemoria1   : 114
np_asignarMemoria2   : 115
np_comienzaFunc      : 20 21 22 23
np_contieneID        : 101 120
np_declfunc          : 20 21 22 23
np_declfuncprincipal : 7
np_defIDActual       : 101
np_defineTipo        : 11 12 13 28 29 30 32 33 34
np_end               : 7
np_endFunc           : 20 21 22 23
np_enviarACuadruplos : 113 114 115
np_enviarACuadruplos2 : 103
np_enviarACuadruplos3 : 105
np_enviarACuadruplos4 : 104
np_enviarACuadruplosC : 
np_esParametro       : 20 21 22 23
np_existeFuncion     : 65
np_forFalso          : 120
np_goSUB             : 65
np_gotoMain          : 3
np_iniciaElse        : 59
np_iniciaFor         : 120
np_iniciaIf          : 59 60
np_insertarOperador  : 18 19 80 81 82 84 85 86 87 89 97 97
np_llamadaFuncion    : 65
np_print             : 52 55
np_printCuadruplos   : 7
np_printStr          : 53 56
np_printTablas       : 7
np_quitarFondo       : 16 17 18 19 28 29 30 32 33 34 52 55 59 59 60 72 73 80 80 102 104 120 125 129
np_quitarFondoParam  : 65
np_quitarIDActual    : 101
np_read              : 76 78
np_resolverParam     : 72 73
np_restarDimension0  : 
np_restarDimension1  : 
np_restarDimension2  : 
np_return            : 129
np_returnVOID        : 130
np_terminaElse       : 59
np_terminaFor        : 120
np_terminaIf         : 60
np_test              : 
np_updateMain        : 7
np_updateUMINUSFALSE : 90
np_updateUMINUSTRUE  : 100
np_verificarD1       : 102
np_verificarD2       : 104
np_verificarValorUnico : 120
np_yaNoEsParametro   : 20 21 22 23
paramsLlamada1       : 65
paramsLlamada2       : 71 73
posibleID            : 76 78 80 93
posibleID2           : 101
posibleID3           : 102
posibleIDDeclaracion : 15 28 29 30 32 33 34
principal            : 6
programa             : 0
programa2            : 1 2
programa3            : 3 5
return               : 40
termino              : 83 84 84 85 85 86 86 87 87
termino1             : 89 90

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA ID SEMICOLON programa2

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . ID SEMICOLON programa2

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAMA ID . SEMICOLON programa2

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAMA ID SEMICOLON . programa2
    (2) programa2 -> . declaracion programa2
    (3) programa2 -> . np_gotoMain programa3
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (4) np_gotoMain -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 4 (np_gotoMain -> .)
    PRINCIPAL       reduce using rule 4 (np_gotoMain -> .)

    programa2                      shift and go to state 5
    declaracion                    shift and go to state 6
    np_gotoMain                    shift and go to state 7

state 5

    (1) programa -> PROGRAMA ID SEMICOLON programa2 .

    $end            reduce using rule 1 (programa -> PROGRAMA ID SEMICOLON programa2 .)


state 6

    (2) programa2 -> declaracion . programa2
    (2) programa2 -> . declaracion programa2
    (3) programa2 -> . np_gotoMain programa3
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (4) np_gotoMain -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 4 (np_gotoMain -> .)
    PRINCIPAL       reduce using rule 4 (np_gotoMain -> .)

    declaracion                    shift and go to state 6
    programa2                      shift and go to state 9
    np_gotoMain                    shift and go to state 7

state 7

    (3) programa2 -> np_gotoMain . programa3
    (5) programa3 -> . declaracionFuncion programa3
    (6) programa3 -> . principal
    (20) declaracionFuncion -> . FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (21) declaracionFuncion -> . FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (22) declaracionFuncion -> . FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (23) declaracionFuncion -> . FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (7) principal -> . PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    FUNCION         shift and go to state 13
    PRINCIPAL       shift and go to state 14

    programa3                      shift and go to state 10
    declaracionFuncion             shift and go to state 11
    principal                      shift and go to state 12

state 8

    (11) declaracion -> VAR . INT np_defineTipo COLON declaracion2
    (12) declaracion -> VAR . FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> VAR . CHAR np_defineTipo COLON declaracion2

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17


state 9

    (2) programa2 -> declaracion programa2 .

    $end            reduce using rule 2 (programa2 -> declaracion programa2 .)


state 10

    (3) programa2 -> np_gotoMain programa3 .

    $end            reduce using rule 3 (programa2 -> np_gotoMain programa3 .)


state 11

    (5) programa3 -> declaracionFuncion . programa3
    (5) programa3 -> . declaracionFuncion programa3
    (6) programa3 -> . principal
    (20) declaracionFuncion -> . FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (21) declaracionFuncion -> . FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (22) declaracionFuncion -> . FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (23) declaracionFuncion -> . FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (7) principal -> . PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    FUNCION         shift and go to state 13
    PRINCIPAL       shift and go to state 14

    declaracionFuncion             shift and go to state 11
    programa3                      shift and go to state 18
    principal                      shift and go to state 12

state 12

    (6) programa3 -> principal .

    $end            reduce using rule 6 (programa3 -> principal .)


state 13

    (20) declaracionFuncion -> FUNCION . VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (21) declaracionFuncion -> FUNCION . INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (22) declaracionFuncion -> FUNCION . FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (23) declaracionFuncion -> FUNCION . CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    VOID            shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22


state 14

    (7) principal -> PRINCIPAL . np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas
    (38) np_declfuncprincipal -> .

    OPAREN          reduce using rule 38 (np_declfuncprincipal -> .)

    np_declfuncprincipal           shift and go to state 23

state 15

    (11) declaracion -> VAR INT . np_defineTipo COLON declaracion2
    (14) np_defineTipo -> .

    COLON           reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 24

state 16

    (12) declaracion -> VAR FLOAT . np_defineTipo COLON declaracion2
    (14) np_defineTipo -> .

    COLON           reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 25

state 17

    (13) declaracion -> VAR CHAR . np_defineTipo COLON declaracion2
    (14) np_defineTipo -> .

    COLON           reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 26

state 18

    (5) programa3 -> declaracionFuncion programa3 .

    $end            reduce using rule 5 (programa3 -> declaracionFuncion programa3 .)


state 19

    (20) declaracionFuncion -> FUNCION VOID . ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 27


state 20

    (21) declaracionFuncion -> FUNCION INT . ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 28


state 21

    (22) declaracionFuncion -> FUNCION FLOAT . ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 29


state 22

    (23) declaracionFuncion -> FUNCION CHAR . ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 30


state 23

    (7) principal -> PRINCIPAL np_declfuncprincipal . np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas
    (8) np_updateMain -> .

    OPAREN          reduce using rule 8 (np_updateMain -> .)

    np_updateMain                  shift and go to state 31

state 24

    (11) declaracion -> VAR INT np_defineTipo . COLON declaracion2

    COLON           shift and go to state 32


state 25

    (12) declaracion -> VAR FLOAT np_defineTipo . COLON declaracion2

    COLON           shift and go to state 33


state 26

    (13) declaracion -> VAR CHAR np_defineTipo . COLON declaracion2

    COLON           shift and go to state 34


state 27

    (20) declaracionFuncion -> FUNCION VOID ID . np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 35

state 28

    (21) declaracionFuncion -> FUNCION INT ID . np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 36

state 29

    (22) declaracionFuncion -> FUNCION FLOAT ID . np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 37

state 30

    (23) declaracionFuncion -> FUNCION CHAR ID . np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 38

state 31

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain . OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    OPAREN          shift and go to state 39


state 32

    (11) declaracion -> VAR INT np_defineTipo COLON . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 40
    np_agregarFondo                shift and go to state 41

state 33

    (12) declaracion -> VAR FLOAT np_defineTipo COLON . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 42
    np_agregarFondo                shift and go to state 41

state 34

    (13) declaracion -> VAR CHAR np_defineTipo COLON . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 43
    np_agregarFondo                shift and go to state 41

state 35

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc . np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (39) np_comienzaFunc -> .

    OPAREN          reduce using rule 39 (np_comienzaFunc -> .)

    np_comienzaFunc                shift and go to state 44

state 36

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc . np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (39) np_comienzaFunc -> .

    OPAREN          reduce using rule 39 (np_comienzaFunc -> .)

    np_comienzaFunc                shift and go to state 45

state 37

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc . np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (39) np_comienzaFunc -> .

    OPAREN          reduce using rule 39 (np_comienzaFunc -> .)

    np_comienzaFunc                shift and go to state 46

state 38

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc . np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (39) np_comienzaFunc -> .

    OPAREN          reduce using rule 39 (np_comienzaFunc -> .)

    np_comienzaFunc                shift and go to state 47

state 39

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN . CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    CPAREN          shift and go to state 48


state 40

    (11) declaracion -> VAR INT np_defineTipo COLON declaracion2 .

    VAR             reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    FUNCION         reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    PRINCIPAL       reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    REGRESA         reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    DESDE           reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    MIENTRAS        reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    LEE             reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    ESCRIBE         reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    SI              reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    ID              reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    CBRACKET        reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    OBRACKET        reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)


state 41

    (15) declaracion2 -> np_agregarFondo . posibleIDDeclaracion declaracion3
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 49

state 42

    (12) declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .

    VAR             reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    FUNCION         reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    PRINCIPAL       reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    REGRESA         reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    DESDE           reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    MIENTRAS        reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    LEE             reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    ESCRIBE         reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    SI              reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    ID              reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    CBRACKET        reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    OBRACKET        reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)


state 43

    (13) declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .

    VAR             reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    FUNCION         reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    PRINCIPAL       reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    REGRESA         reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    DESDE           reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    MIENTRAS        reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    LEE             reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    ESCRIBE         reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    SI              reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    ID              reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    CBRACKET        reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    OBRACKET        reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)


state 44

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc . OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 51


state 45

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc . OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 52


state 46

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc . OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 53


state 47

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc . OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 54


state 48

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN . OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    OBRACKET        shift and go to state 55


state 49

    (15) declaracion2 -> np_agregarFondo posibleIDDeclaracion . declaracion3
    (16) declaracion3 -> . np_quitarFondo SEMICOLON
    (17) declaracion3 -> . np_quitarFondo COMA declaracion2
    (18) declaracion3 -> . ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON
    (19) declaracion3 -> . ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2
    (146) np_quitarFondo -> .

    ASSIGN          shift and go to state 58
    SEMICOLON       reduce using rule 146 (np_quitarFondo -> .)
    COMA            reduce using rule 146 (np_quitarFondo -> .)

    declaracion3                   shift and go to state 56
    np_quitarFondo                 shift and go to state 57

state 50

    (113) posibleIDDeclaracion -> ID . np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> ID . np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID . np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
    (138) np_addVariable -> .

    OCORCH          reduce using rule 138 (np_addVariable -> .)
    ASSIGN          reduce using rule 138 (np_addVariable -> .)
    SEMICOLON       reduce using rule 138 (np_addVariable -> .)
    COMA            reduce using rule 138 (np_addVariable -> .)
    CPAREN          reduce using rule 138 (np_addVariable -> .)

    np_addVariable                 shift and go to state 59

state 51

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN . np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 60

state 52

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN . np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 61

state 53

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN . np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 62

state 54

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN . np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 63

state 55

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET . estatutos CBRACKET np_end np_printCuadruplos np_printTablas
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 64
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 56

    (15) declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .

    VAR             reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    FUNCION         reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    PRINCIPAL       reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    REGRESA         reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    DESDE           reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    MIENTRAS        reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    LEE             reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    ESCRIBE         reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    SI              reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    ID              reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    CBRACKET        reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    OBRACKET        reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)


state 57

    (16) declaracion3 -> np_quitarFondo . SEMICOLON
    (17) declaracion3 -> np_quitarFondo . COMA declaracion2

    SEMICOLON       shift and go to state 83
    COMA            shift and go to state 84


state 58

    (18) declaracion3 -> ASSIGN . np_insertarOperador expresion np_quitarFondo SEMICOLON
    (19) declaracion3 -> ASSIGN . np_insertarOperador expresion np_quitarFondo COMA declaracion2
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 85

state 59

    (113) posibleIDDeclaracion -> ID np_addVariable . np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> ID np_addVariable . np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable . np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
    (139) np_enviarACuadruplos -> .

    OCORCH          reduce using rule 139 (np_enviarACuadruplos -> .)
    ASSIGN          reduce using rule 139 (np_enviarACuadruplos -> .)
    SEMICOLON       reduce using rule 139 (np_enviarACuadruplos -> .)
    COMA            reduce using rule 139 (np_enviarACuadruplos -> .)
    CPAREN          reduce using rule 139 (np_enviarACuadruplos -> .)

    np_enviarACuadruplos           shift and go to state 86

state 60

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro . declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    INT             shift and go to state 89
    CHAR            shift and go to state 90
    FLOAT           shift and go to state 91
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros   shift and go to state 87
    empty                          shift and go to state 88

state 61

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro . declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    INT             shift and go to state 89
    CHAR            shift and go to state 90
    FLOAT           shift and go to state 91
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros   shift and go to state 92
    empty                          shift and go to state 88

state 62

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro . declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    INT             shift and go to state 89
    CHAR            shift and go to state 90
    FLOAT           shift and go to state 91
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros   shift and go to state 93
    empty                          shift and go to state 88

state 63

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro . declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    INT             shift and go to state 89
    CHAR            shift and go to state 90
    FLOAT           shift and go to state 91
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros   shift and go to state 94
    empty                          shift and go to state 88

state 64

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos . CBRACKET np_end np_printCuadruplos np_printTablas

    CBRACKET        shift and go to state 95


state 65

    (40) estatutos -> return . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    return                         shift and go to state 65
    estatutos                      shift and go to state 96
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 66

    (41) estatutos -> empty .

    CBRACKET        reduce using rule 41 (estatutos -> empty .)


state 67

    (42) estatutos -> declaracion . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    declaracion                    shift and go to state 67
    estatutos                      shift and go to state 97
    return                         shift and go to state 65
    empty                          shift and go to state 66
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 68

    (43) estatutos -> estatutoRepeticionIncondicional . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutoRepeticionIncondicional shift and go to state 68
    estatutos                      shift and go to state 98
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 69

    (44) estatutos -> estatutoRepeticionCondicional . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutoRepeticionCondicional  shift and go to state 69
    estatutos                      shift and go to state 99
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 70

    (45) estatutos -> lectura . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    lectura                        shift and go to state 70
    estatutos                      shift and go to state 100
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 71

    (46) estatutos -> asignacion . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    asignacion                     shift and go to state 71
    estatutos                      shift and go to state 101
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 72

    (47) estatutos -> escritura . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    escritura                      shift and go to state 72
    estatutos                      shift and go to state 102
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 73

    (48) estatutos -> decision . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    decision                       shift and go to state 73
    estatutos                      shift and go to state 103
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 74

    (49) estatutos -> llamadaFuncion . SEMICOLON estatutos

    SEMICOLON       shift and go to state 104


state 75

    (129) return -> REGRESA . np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> REGRESA . SEMICOLON np_returnVOID
    (145) np_agregarFondo -> .

    SEMICOLON       shift and go to state 106
    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 105

state 76

    (120) estatutoRepeticionIncondicional -> DESDE . ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor

    ID              shift and go to state 107


state 77

    (65) llamadaFuncion -> ID . np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> ID . np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (66) np_existeFuncion -> .
    (106) np_defIDActual -> .

    OPAREN          reduce using rule 66 (np_existeFuncion -> .)
    OCORCH          reduce using rule 106 (np_defIDActual -> .)
    ASSIGN          reduce using rule 106 (np_defIDActual -> .)

    np_existeFuncion               shift and go to state 108
    np_defIDActual                 shift and go to state 109

state 78

    (125) estatutoRepeticionCondicional -> MIENTRAS . OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    OPAREN          shift and go to state 110


state 79

    (76) lectura -> LEE . OPAREN posibleID np_read lectura2 CPAREN SEMICOLON

    OPAREN          shift and go to state 111


state 80

    (80) asignacion -> posibleID . np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (145) np_agregarFondo -> .

    ASSIGN          reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 112

state 81

    (50) escritura -> ESCRIBE . OPAREN escritura2 CPAREN SEMICOLON

    OPAREN          shift and go to state 113


state 82

    (59) decision -> SI . OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI . OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf

    OPAREN          shift and go to state 114


state 83

    (16) declaracion3 -> np_quitarFondo SEMICOLON .

    VAR             reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    FUNCION         reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    PRINCIPAL       reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    REGRESA         reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    DESDE           reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    MIENTRAS        reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    LEE             reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    ESCRIBE         reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    SI              reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    ID              reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    CBRACKET        reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    OBRACKET        reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)


state 84

    (17) declaracion3 -> np_quitarFondo COMA . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 115
    np_agregarFondo                shift and go to state 41

state 85

    (18) declaracion3 -> ASSIGN np_insertarOperador . expresion np_quitarFondo SEMICOLON
    (19) declaracion3 -> ASSIGN np_insertarOperador . expresion np_quitarFondo COMA declaracion2
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 116
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 86

    (113) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos . np_actualizarDimensiones
    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos . np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos . np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
    (144) np_actualizarDimensiones -> .

    OCORCH          reduce using rule 144 (np_actualizarDimensiones -> .)
    ASSIGN          reduce using rule 144 (np_actualizarDimensiones -> .)
    SEMICOLON       reduce using rule 144 (np_actualizarDimensiones -> .)
    COMA            reduce using rule 144 (np_actualizarDimensiones -> .)
    CPAREN          reduce using rule 144 (np_actualizarDimensiones -> .)

    np_actualizarDimensiones       shift and go to state 128

state 87

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros . np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    CPAREN          reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 129

state 88

    (27) declaracionFuncionParametros -> empty .

    CPAREN          reduce using rule 27 (declaracionFuncionParametros -> empty .)


state 89

    (28) declaracionFuncionParametros -> INT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 130

state 90

    (29) declaracionFuncionParametros -> CHAR . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 131

state 91

    (30) declaracionFuncionParametros -> FLOAT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 132

state 92

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros . np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    CPAREN          reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 133

state 93

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros . np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    CPAREN          reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 134

state 94

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros . np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    CPAREN          reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 135

state 95

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET . np_end np_printCuadruplos np_printTablas
    (9) np_end -> .

    $end            reduce using rule 9 (np_end -> .)

    np_end                         shift and go to state 136

state 96

    (40) estatutos -> return estatutos .

    CBRACKET        reduce using rule 40 (estatutos -> return estatutos .)


state 97

    (42) estatutos -> declaracion estatutos .

    CBRACKET        reduce using rule 42 (estatutos -> declaracion estatutos .)


state 98

    (43) estatutos -> estatutoRepeticionIncondicional estatutos .

    CBRACKET        reduce using rule 43 (estatutos -> estatutoRepeticionIncondicional estatutos .)


state 99

    (44) estatutos -> estatutoRepeticionCondicional estatutos .

    CBRACKET        reduce using rule 44 (estatutos -> estatutoRepeticionCondicional estatutos .)


state 100

    (45) estatutos -> lectura estatutos .

    CBRACKET        reduce using rule 45 (estatutos -> lectura estatutos .)


state 101

    (46) estatutos -> asignacion estatutos .

    CBRACKET        reduce using rule 46 (estatutos -> asignacion estatutos .)


state 102

    (47) estatutos -> escritura estatutos .

    CBRACKET        reduce using rule 47 (estatutos -> escritura estatutos .)


state 103

    (48) estatutos -> decision estatutos .

    CBRACKET        reduce using rule 48 (estatutos -> decision estatutos .)


state 104

    (49) estatutos -> llamadaFuncion SEMICOLON . estatutos
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    llamadaFuncion                 shift and go to state 74
    estatutos                      shift and go to state 137
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    posibleID                      shift and go to state 80

state 105

    (129) return -> REGRESA np_agregarFondo . expresion np_quitarFondo SEMICOLON np_return
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 138
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 106

    (130) return -> REGRESA SEMICOLON . np_returnVOID
    (132) np_returnVOID -> .

    REGRESA         reduce using rule 132 (np_returnVOID -> .)
    VAR             reduce using rule 132 (np_returnVOID -> .)
    DESDE           reduce using rule 132 (np_returnVOID -> .)
    MIENTRAS        reduce using rule 132 (np_returnVOID -> .)
    LEE             reduce using rule 132 (np_returnVOID -> .)
    ESCRIBE         reduce using rule 132 (np_returnVOID -> .)
    SI              reduce using rule 132 (np_returnVOID -> .)
    ID              reduce using rule 132 (np_returnVOID -> .)
    CBRACKET        reduce using rule 132 (np_returnVOID -> .)

    np_returnVOID                  shift and go to state 139

state 107

    (120) estatutoRepeticionIncondicional -> DESDE ID . np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (121) np_verificarValorUnico -> .

    HASTA           reduce using rule 121 (np_verificarValorUnico -> .)

    np_verificarValorUnico         shift and go to state 140

state 108

    (65) llamadaFuncion -> ID np_existeFuncion . np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (67) np_llamadaFuncion -> .

    OPAREN          reduce using rule 67 (np_llamadaFuncion -> .)

    np_llamadaFuncion              shift and go to state 141

state 109

    (101) posibleID -> ID np_defIDActual . np_contieneID posibleID2 np_quitarIDActual
    (133) np_contieneID -> .

    OCORCH          reduce using rule 133 (np_contieneID -> .)
    ASSIGN          reduce using rule 133 (np_contieneID -> .)
    OPMATRIZ        reduce using rule 133 (np_contieneID -> .)
    PLUS            reduce using rule 133 (np_contieneID -> .)
    MINUS           reduce using rule 133 (np_contieneID -> .)
    MULTIPLY        reduce using rule 133 (np_contieneID -> .)
    DIVIDE          reduce using rule 133 (np_contieneID -> .)
    LOGIC           reduce using rule 133 (np_contieneID -> .)
    RELOP           reduce using rule 133 (np_contieneID -> .)
    SEMICOLON       reduce using rule 133 (np_contieneID -> .)
    COMA            reduce using rule 133 (np_contieneID -> .)
    CPAREN          reduce using rule 133 (np_contieneID -> .)
    CCORCH          reduce using rule 133 (np_contieneID -> .)
    HAZ             reduce using rule 133 (np_contieneID -> .)

    np_contieneID                  shift and go to state 142

state 110

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN . np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 143

state 111

    (76) lectura -> LEE OPAREN . posibleID np_read lectura2 CPAREN SEMICOLON
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    ID              shift and go to state 145

    posibleID                      shift and go to state 144

state 112

    (80) asignacion -> posibleID np_agregarFondo . ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON

    ASSIGN          shift and go to state 146


state 113

    (50) escritura -> ESCRIBE OPAREN . escritura2 CPAREN SEMICOLON
    (51) escritura2 -> . empty
    (52) escritura2 -> . np_agregarFondo expresion np_quitarFondo np_print escritura3
    (53) escritura2 -> . STRING np_printStr escritura3
    (149) empty -> .
    (145) np_agregarFondo -> .

    STRING          shift and go to state 150
    CPAREN          reduce using rule 149 (empty -> .)
    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    escritura2                     shift and go to state 147
    empty                          shift and go to state 148
    np_agregarFondo                shift and go to state 149

state 114

    (59) decision -> SI OPAREN . np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN . np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 151

state 115

    (17) declaracion3 -> np_quitarFondo COMA declaracion2 .

    VAR             reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    FUNCION         reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    PRINCIPAL       reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    REGRESA         reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    DESDE           reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    MIENTRAS        reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    LEE             reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    ESCRIBE         reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    SI              reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    ID              reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    CBRACKET        reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    OBRACKET        reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)


state 116

    (18) declaracion3 -> ASSIGN np_insertarOperador expresion . np_quitarFondo SEMICOLON
    (19) declaracion3 -> ASSIGN np_insertarOperador expresion . np_quitarFondo COMA declaracion2
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    SEMICOLON       reduce using rule 146 (np_quitarFondo -> .)
    COMA            reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 152

state 117

    (83) expresion -> termino .
    (84) termino -> termino . PLUS np_insertarOperador termino
    (85) termino -> termino . MINUS np_insertarOperador termino
    (86) termino -> termino . MULTIPLY np_insertarOperador termino
    (87) termino -> termino . DIVIDE np_insertarOperador termino

    LOGIC           reduce using rule 83 (expresion -> termino .)
    RELOP           reduce using rule 83 (expresion -> termino .)
    SEMICOLON       reduce using rule 83 (expresion -> termino .)
    COMA            reduce using rule 83 (expresion -> termino .)
    CPAREN          reduce using rule 83 (expresion -> termino .)
    CCORCH          reduce using rule 83 (expresion -> termino .)
    HAZ             reduce using rule 83 (expresion -> termino .)
    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    MULTIPLY        shift and go to state 157
    DIVIDE          shift and go to state 158


state 118

    (100) termino1 -> MINUS . np_updateUMINUSTRUE constante
    (92) np_updateUMINUSTRUE -> .

    ENTERO          reduce using rule 92 (np_updateUMINUSTRUE -> .)
    FLOTANTE        reduce using rule 92 (np_updateUMINUSTRUE -> .)

    np_updateUMINUSTRUE            shift and go to state 159

state 119

    (89) termino -> termino1 . OPMATRIZ np_insertarOperador
    (90) termino -> termino1 . np_updateUMINUSFALSE
    (91) np_updateUMINUSFALSE -> .

    OPMATRIZ        shift and go to state 160
    PLUS            reduce using rule 91 (np_updateUMINUSFALSE -> .)
    MINUS           reduce using rule 91 (np_updateUMINUSFALSE -> .)
    MULTIPLY        reduce using rule 91 (np_updateUMINUSFALSE -> .)
    DIVIDE          reduce using rule 91 (np_updateUMINUSFALSE -> .)
    LOGIC           reduce using rule 91 (np_updateUMINUSFALSE -> .)
    RELOP           reduce using rule 91 (np_updateUMINUSFALSE -> .)
    SEMICOLON       reduce using rule 91 (np_updateUMINUSFALSE -> .)
    COMA            reduce using rule 91 (np_updateUMINUSFALSE -> .)
    CPAREN          reduce using rule 91 (np_updateUMINUSFALSE -> .)
    CCORCH          reduce using rule 91 (np_updateUMINUSFALSE -> .)
    HAZ             reduce using rule 91 (np_updateUMINUSFALSE -> .)

    np_updateUMINUSFALSE           shift and go to state 161

state 120

    (93) termino1 -> posibleID .

    OPMATRIZ        reduce using rule 93 (termino1 -> posibleID .)
    PLUS            reduce using rule 93 (termino1 -> posibleID .)
    MINUS           reduce using rule 93 (termino1 -> posibleID .)
    MULTIPLY        reduce using rule 93 (termino1 -> posibleID .)
    DIVIDE          reduce using rule 93 (termino1 -> posibleID .)
    LOGIC           reduce using rule 93 (termino1 -> posibleID .)
    RELOP           reduce using rule 93 (termino1 -> posibleID .)
    SEMICOLON       reduce using rule 93 (termino1 -> posibleID .)
    COMA            reduce using rule 93 (termino1 -> posibleID .)
    CPAREN          reduce using rule 93 (termino1 -> posibleID .)
    CCORCH          reduce using rule 93 (termino1 -> posibleID .)
    HAZ             reduce using rule 93 (termino1 -> posibleID .)


state 121

    (94) termino1 -> constante .

    OPMATRIZ        reduce using rule 94 (termino1 -> constante .)
    PLUS            reduce using rule 94 (termino1 -> constante .)
    MINUS           reduce using rule 94 (termino1 -> constante .)
    MULTIPLY        reduce using rule 94 (termino1 -> constante .)
    DIVIDE          reduce using rule 94 (termino1 -> constante .)
    LOGIC           reduce using rule 94 (termino1 -> constante .)
    RELOP           reduce using rule 94 (termino1 -> constante .)
    SEMICOLON       reduce using rule 94 (termino1 -> constante .)
    COMA            reduce using rule 94 (termino1 -> constante .)
    CPAREN          reduce using rule 94 (termino1 -> constante .)
    CCORCH          reduce using rule 94 (termino1 -> constante .)
    HAZ             reduce using rule 94 (termino1 -> constante .)


state 122

    (95) termino1 -> CARACT . np_addConstanteCHAR
    (136) np_addConstanteCHAR -> .

    OPMATRIZ        reduce using rule 136 (np_addConstanteCHAR -> .)
    PLUS            reduce using rule 136 (np_addConstanteCHAR -> .)
    MINUS           reduce using rule 136 (np_addConstanteCHAR -> .)
    MULTIPLY        reduce using rule 136 (np_addConstanteCHAR -> .)
    DIVIDE          reduce using rule 136 (np_addConstanteCHAR -> .)
    LOGIC           reduce using rule 136 (np_addConstanteCHAR -> .)
    RELOP           reduce using rule 136 (np_addConstanteCHAR -> .)
    SEMICOLON       reduce using rule 136 (np_addConstanteCHAR -> .)
    COMA            reduce using rule 136 (np_addConstanteCHAR -> .)
    CPAREN          reduce using rule 136 (np_addConstanteCHAR -> .)
    CCORCH          reduce using rule 136 (np_addConstanteCHAR -> .)
    HAZ             reduce using rule 136 (np_addConstanteCHAR -> .)

    np_addConstanteCHAR            shift and go to state 162

state 123

    (96) termino1 -> llamadaFuncion .

    OPMATRIZ        reduce using rule 96 (termino1 -> llamadaFuncion .)
    PLUS            reduce using rule 96 (termino1 -> llamadaFuncion .)
    MINUS           reduce using rule 96 (termino1 -> llamadaFuncion .)
    MULTIPLY        reduce using rule 96 (termino1 -> llamadaFuncion .)
    DIVIDE          reduce using rule 96 (termino1 -> llamadaFuncion .)
    LOGIC           reduce using rule 96 (termino1 -> llamadaFuncion .)
    RELOP           reduce using rule 96 (termino1 -> llamadaFuncion .)
    SEMICOLON       reduce using rule 96 (termino1 -> llamadaFuncion .)
    COMA            reduce using rule 96 (termino1 -> llamadaFuncion .)
    CPAREN          reduce using rule 96 (termino1 -> llamadaFuncion .)
    CCORCH          reduce using rule 96 (termino1 -> llamadaFuncion .)
    HAZ             reduce using rule 96 (termino1 -> llamadaFuncion .)


state 124

    (97) termino1 -> OPAREN . np_insertarOperador expresion CPAREN np_insertarOperador
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 163

state 125

    (101) posibleID -> ID . np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (65) llamadaFuncion -> ID . np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (106) np_defIDActual -> .
    (66) np_existeFuncion -> .

    OCORCH          reduce using rule 106 (np_defIDActual -> .)
    OPMATRIZ        reduce using rule 106 (np_defIDActual -> .)
    PLUS            reduce using rule 106 (np_defIDActual -> .)
    MINUS           reduce using rule 106 (np_defIDActual -> .)
    MULTIPLY        reduce using rule 106 (np_defIDActual -> .)
    DIVIDE          reduce using rule 106 (np_defIDActual -> .)
    LOGIC           reduce using rule 106 (np_defIDActual -> .)
    RELOP           reduce using rule 106 (np_defIDActual -> .)
    SEMICOLON       reduce using rule 106 (np_defIDActual -> .)
    COMA            reduce using rule 106 (np_defIDActual -> .)
    CPAREN          reduce using rule 106 (np_defIDActual -> .)
    CCORCH          reduce using rule 106 (np_defIDActual -> .)
    HAZ             reduce using rule 106 (np_defIDActual -> .)
    OPAREN          reduce using rule 66 (np_existeFuncion -> .)

    np_defIDActual                 shift and go to state 109
    np_existeFuncion               shift and go to state 108

state 126

    (98) constante -> ENTERO . np_addConstanteINT
    (134) np_addConstanteINT -> .

    OPMATRIZ        reduce using rule 134 (np_addConstanteINT -> .)
    PLUS            reduce using rule 134 (np_addConstanteINT -> .)
    MINUS           reduce using rule 134 (np_addConstanteINT -> .)
    MULTIPLY        reduce using rule 134 (np_addConstanteINT -> .)
    DIVIDE          reduce using rule 134 (np_addConstanteINT -> .)
    LOGIC           reduce using rule 134 (np_addConstanteINT -> .)
    RELOP           reduce using rule 134 (np_addConstanteINT -> .)
    SEMICOLON       reduce using rule 134 (np_addConstanteINT -> .)
    COMA            reduce using rule 134 (np_addConstanteINT -> .)
    CPAREN          reduce using rule 134 (np_addConstanteINT -> .)
    CCORCH          reduce using rule 134 (np_addConstanteINT -> .)
    HAZ             reduce using rule 134 (np_addConstanteINT -> .)

    np_addConstanteINT             shift and go to state 164

state 127

    (99) constante -> FLOTANTE . np_addConstanteFLOAT
    (135) np_addConstanteFLOAT -> .

    OPMATRIZ        reduce using rule 135 (np_addConstanteFLOAT -> .)
    PLUS            reduce using rule 135 (np_addConstanteFLOAT -> .)
    MINUS           reduce using rule 135 (np_addConstanteFLOAT -> .)
    MULTIPLY        reduce using rule 135 (np_addConstanteFLOAT -> .)
    DIVIDE          reduce using rule 135 (np_addConstanteFLOAT -> .)
    LOGIC           reduce using rule 135 (np_addConstanteFLOAT -> .)
    RELOP           reduce using rule 135 (np_addConstanteFLOAT -> .)
    SEMICOLON       reduce using rule 135 (np_addConstanteFLOAT -> .)
    COMA            reduce using rule 135 (np_addConstanteFLOAT -> .)
    CPAREN          reduce using rule 135 (np_addConstanteFLOAT -> .)
    CCORCH          reduce using rule 135 (np_addConstanteFLOAT -> .)
    HAZ             reduce using rule 135 (np_addConstanteFLOAT -> .)

    np_addConstanteFLOAT           shift and go to state 165

state 128

    (113) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .
    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones . OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones . OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ASSIGN          reduce using rule 113 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    SEMICOLON       reduce using rule 113 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    COMA            reduce using rule 113 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    CPAREN          reduce using rule 113 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    OCORCH          shift and go to state 166


state 129

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro . CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 167


state 130

    (28) declaracionFuncionParametros -> INT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 168

state 131

    (29) declaracionFuncionParametros -> CHAR np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 169

state 132

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 170

state 133

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro . CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 171


state 134

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro . CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 172


state 135

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro . CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 173


state 136

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end . np_printCuadruplos np_printTablas
    (147) np_printCuadruplos -> .

    $end            reduce using rule 147 (np_printCuadruplos -> .)

    np_printCuadruplos             shift and go to state 174

state 137

    (49) estatutos -> llamadaFuncion SEMICOLON estatutos .

    CBRACKET        reduce using rule 49 (estatutos -> llamadaFuncion SEMICOLON estatutos .)


state 138

    (129) return -> REGRESA np_agregarFondo expresion . np_quitarFondo SEMICOLON np_return
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    SEMICOLON       reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 175

state 139

    (130) return -> REGRESA SEMICOLON np_returnVOID .

    REGRESA         reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    VAR             reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    DESDE           reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    MIENTRAS        reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    LEE             reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    ESCRIBE         reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    SI              reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    ID              reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)
    CBRACKET        reduce using rule 130 (return -> REGRESA SEMICOLON np_returnVOID .)


state 140

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico . np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (133) np_contieneID -> .

    HASTA           reduce using rule 133 (np_contieneID -> .)

    np_contieneID                  shift and go to state 176

state 141

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion . np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (68) np_agregarFondoParam -> .

    OPAREN          reduce using rule 68 (np_agregarFondoParam -> .)

    np_agregarFondoParam           shift and go to state 177

state 142

    (101) posibleID -> ID np_defIDActual np_contieneID . posibleID2 np_quitarIDActual
    (102) posibleID2 -> . OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH
    (103) posibleID2 -> . np_enviarACuadruplos2
    (140) np_enviarACuadruplos2 -> .

    OCORCH          shift and go to state 179
    ASSIGN          reduce using rule 140 (np_enviarACuadruplos2 -> .)
    OPMATRIZ        reduce using rule 140 (np_enviarACuadruplos2 -> .)
    PLUS            reduce using rule 140 (np_enviarACuadruplos2 -> .)
    MINUS           reduce using rule 140 (np_enviarACuadruplos2 -> .)
    MULTIPLY        reduce using rule 140 (np_enviarACuadruplos2 -> .)
    DIVIDE          reduce using rule 140 (np_enviarACuadruplos2 -> .)
    LOGIC           reduce using rule 140 (np_enviarACuadruplos2 -> .)
    RELOP           reduce using rule 140 (np_enviarACuadruplos2 -> .)
    SEMICOLON       reduce using rule 140 (np_enviarACuadruplos2 -> .)
    COMA            reduce using rule 140 (np_enviarACuadruplos2 -> .)
    CPAREN          reduce using rule 140 (np_enviarACuadruplos2 -> .)
    CCORCH          reduce using rule 140 (np_enviarACuadruplos2 -> .)
    HAZ             reduce using rule 140 (np_enviarACuadruplos2 -> .)

    posibleID2                     shift and go to state 178
    np_enviarACuadruplos2          shift and go to state 180

state 143

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo . npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (126) npWhileStExp -> .

    CARACT          reduce using rule 126 (npWhileStExp -> .)
    OPAREN          reduce using rule 126 (npWhileStExp -> .)
    MINUS           reduce using rule 126 (npWhileStExp -> .)
    ID              reduce using rule 126 (npWhileStExp -> .)
    ENTERO          reduce using rule 126 (npWhileStExp -> .)
    FLOTANTE        reduce using rule 126 (npWhileStExp -> .)

    npWhileStExp                   shift and go to state 181

state 144

    (76) lectura -> LEE OPAREN posibleID . np_read lectura2 CPAREN SEMICOLON
    (79) np_read -> .

    COMA            reduce using rule 79 (np_read -> .)
    CPAREN          reduce using rule 79 (np_read -> .)

    np_read                        shift and go to state 182

state 145

    (101) posibleID -> ID . np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (106) np_defIDActual -> .

    OCORCH          reduce using rule 106 (np_defIDActual -> .)
    COMA            reduce using rule 106 (np_defIDActual -> .)
    CPAREN          reduce using rule 106 (np_defIDActual -> .)

    np_defIDActual                 shift and go to state 109

state 146

    (80) asignacion -> posibleID np_agregarFondo ASSIGN . np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 183

state 147

    (50) escritura -> ESCRIBE OPAREN escritura2 . CPAREN SEMICOLON

    CPAREN          shift and go to state 184


state 148

    (51) escritura2 -> empty .

    CPAREN          reduce using rule 51 (escritura2 -> empty .)


state 149

    (52) escritura2 -> np_agregarFondo . expresion np_quitarFondo np_print escritura3
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 185
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 150

    (53) escritura2 -> STRING . np_printStr escritura3
    (58) np_printStr -> .

    COMA            reduce using rule 58 (np_printStr -> .)
    CPAREN          reduce using rule 58 (np_printStr -> .)

    np_printStr                    shift and go to state 186

state 151

    (59) decision -> SI OPAREN np_agregarFondo . expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo . expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 187
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 152

    (18) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo . SEMICOLON
    (19) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo . COMA declaracion2

    SEMICOLON       shift and go to state 188
    COMA            shift and go to state 189


state 153

    (81) expresion -> expresion LOGIC . np_insertarOperador expresion
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 190

state 154

    (82) expresion -> expresion RELOP . np_insertarOperador expresion
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 191

state 155

    (84) termino -> termino PLUS . np_insertarOperador termino
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 192

state 156

    (85) termino -> termino MINUS . np_insertarOperador termino
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 193

state 157

    (86) termino -> termino MULTIPLY . np_insertarOperador termino
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 194

state 158

    (87) termino -> termino DIVIDE . np_insertarOperador termino
    (88) np_insertarOperador -> .

    CARACT          reduce using rule 88 (np_insertarOperador -> .)
    OPAREN          reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    ID              reduce using rule 88 (np_insertarOperador -> .)
    ENTERO          reduce using rule 88 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 195

state 159

    (100) termino1 -> MINUS np_updateUMINUSTRUE . constante
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT

    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    constante                      shift and go to state 196

state 160

    (89) termino -> termino1 OPMATRIZ . np_insertarOperador
    (88) np_insertarOperador -> .

    PLUS            reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    MULTIPLY        reduce using rule 88 (np_insertarOperador -> .)
    DIVIDE          reduce using rule 88 (np_insertarOperador -> .)
    LOGIC           reduce using rule 88 (np_insertarOperador -> .)
    RELOP           reduce using rule 88 (np_insertarOperador -> .)
    SEMICOLON       reduce using rule 88 (np_insertarOperador -> .)
    COMA            reduce using rule 88 (np_insertarOperador -> .)
    CPAREN          reduce using rule 88 (np_insertarOperador -> .)
    CCORCH          reduce using rule 88 (np_insertarOperador -> .)
    HAZ             reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 197

state 161

    (90) termino -> termino1 np_updateUMINUSFALSE .

    PLUS            reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    MINUS           reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    MULTIPLY        reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    DIVIDE          reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    LOGIC           reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    RELOP           reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    SEMICOLON       reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    COMA            reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    CPAREN          reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    CCORCH          reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)
    HAZ             reduce using rule 90 (termino -> termino1 np_updateUMINUSFALSE .)


state 162

    (95) termino1 -> CARACT np_addConstanteCHAR .

    OPMATRIZ        reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    PLUS            reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    MINUS           reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    MULTIPLY        reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    DIVIDE          reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    LOGIC           reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    RELOP           reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    SEMICOLON       reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    COMA            reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    CPAREN          reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    CCORCH          reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)
    HAZ             reduce using rule 95 (termino1 -> CARACT np_addConstanteCHAR .)


state 163

    (97) termino1 -> OPAREN np_insertarOperador . expresion CPAREN np_insertarOperador
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 198
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 164

    (98) constante -> ENTERO np_addConstanteINT .

    OPMATRIZ        reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    PLUS            reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    MINUS           reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    MULTIPLY        reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    DIVIDE          reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    LOGIC           reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    RELOP           reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    SEMICOLON       reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    COMA            reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    CPAREN          reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    CCORCH          reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)
    HAZ             reduce using rule 98 (constante -> ENTERO np_addConstanteINT .)


state 165

    (99) constante -> FLOTANTE np_addConstanteFLOAT .

    OPMATRIZ        reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    PLUS            reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    MINUS           reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    MULTIPLY        reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    DIVIDE          reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    LOGIC           reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    RELOP           reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    SEMICOLON       reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    COMA            reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    CPAREN          reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    CCORCH          reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)
    HAZ             reduce using rule 99 (constante -> FLOTANTE np_addConstanteFLOAT .)


state 166

    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH . ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH . ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ENTERO          shift and go to state 199


state 167

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 200
    empty                          shift and go to state 201
    declaracion                    shift and go to state 202

state 168

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 203

state 169

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 204

state 170

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 205

state 171

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 206
    empty                          shift and go to state 201
    declaracion                    shift and go to state 202

state 172

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 207
    empty                          shift and go to state 201
    declaracion                    shift and go to state 202

state 173

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 208
    empty                          shift and go to state 201
    declaracion                    shift and go to state 202

state 174

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos . np_printTablas
    (10) np_printTablas -> .

    $end            reduce using rule 10 (np_printTablas -> .)

    np_printTablas                 shift and go to state 209

state 175

    (129) return -> REGRESA np_agregarFondo expresion np_quitarFondo . SEMICOLON np_return

    SEMICOLON       shift and go to state 210


state 176

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID . HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor

    HASTA           shift and go to state 211


state 177

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam . OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    OPAREN          shift and go to state 212


state 178

    (101) posibleID -> ID np_defIDActual np_contieneID posibleID2 . np_quitarIDActual
    (107) np_quitarIDActual -> .

    ASSIGN          reduce using rule 107 (np_quitarIDActual -> .)
    OPMATRIZ        reduce using rule 107 (np_quitarIDActual -> .)
    PLUS            reduce using rule 107 (np_quitarIDActual -> .)
    MINUS           reduce using rule 107 (np_quitarIDActual -> .)
    MULTIPLY        reduce using rule 107 (np_quitarIDActual -> .)
    DIVIDE          reduce using rule 107 (np_quitarIDActual -> .)
    LOGIC           reduce using rule 107 (np_quitarIDActual -> .)
    RELOP           reduce using rule 107 (np_quitarIDActual -> .)
    SEMICOLON       reduce using rule 107 (np_quitarIDActual -> .)
    COMA            reduce using rule 107 (np_quitarIDActual -> .)
    CPAREN          reduce using rule 107 (np_quitarIDActual -> .)
    CCORCH          reduce using rule 107 (np_quitarIDActual -> .)
    HAZ             reduce using rule 107 (np_quitarIDActual -> .)

    np_quitarIDActual              shift and go to state 213

state 179

    (102) posibleID2 -> OCORCH . np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 214

state 180

    (103) posibleID2 -> np_enviarACuadruplos2 .

    ASSIGN          reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    OPMATRIZ        reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    PLUS            reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    MINUS           reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    MULTIPLY        reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    DIVIDE          reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    LOGIC           reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    RELOP           reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    SEMICOLON       reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    COMA            reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    CPAREN          reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    CCORCH          reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)
    HAZ             reduce using rule 103 (posibleID2 -> np_enviarACuadruplos2 .)


state 181

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp . expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 215
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 182

    (76) lectura -> LEE OPAREN posibleID np_read . lectura2 CPAREN SEMICOLON
    (77) lectura2 -> . empty
    (78) lectura2 -> . COMA posibleID np_read lectura2
    (149) empty -> .

    COMA            shift and go to state 218
    CPAREN          reduce using rule 149 (empty -> .)

    lectura2                       shift and go to state 216
    empty                          shift and go to state 217

state 183

    (80) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador . np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 219

state 184

    (50) escritura -> ESCRIBE OPAREN escritura2 CPAREN . SEMICOLON

    SEMICOLON       shift and go to state 220


state 185

    (52) escritura2 -> np_agregarFondo expresion . np_quitarFondo np_print escritura3
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 221

state 186

    (53) escritura2 -> STRING np_printStr . escritura3
    (54) escritura3 -> . empty
    (55) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (56) escritura3 -> . COMA STRING np_printStr escritura3
    (149) empty -> .

    COMA            shift and go to state 224
    CPAREN          reduce using rule 149 (empty -> .)

    escritura3                     shift and go to state 222
    empty                          shift and go to state 223

state 187

    (59) decision -> SI OPAREN np_agregarFondo expresion . np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion . np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 225

state 188

    (18) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .

    VAR             reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    FUNCION         reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    PRINCIPAL       reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    REGRESA         reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    DESDE           reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    MIENTRAS        reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    LEE             reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    ESCRIBE         reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    SI              reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    ID              reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    CBRACKET        reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    OBRACKET        reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)


state 189

    (19) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 226
    np_agregarFondo                shift and go to state 41

state 190

    (81) expresion -> expresion LOGIC np_insertarOperador . expresion
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 227
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 191

    (82) expresion -> expresion RELOP np_insertarOperador . expresion
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 228
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 192

    (84) termino -> termino PLUS np_insertarOperador . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    termino                        shift and go to state 229
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 193

    (85) termino -> termino MINUS np_insertarOperador . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    termino                        shift and go to state 230
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 194

    (86) termino -> termino MULTIPLY np_insertarOperador . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    termino                        shift and go to state 231
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 195

    (87) termino -> termino DIVIDE np_insertarOperador . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    termino                        shift and go to state 232
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 196

    (100) termino1 -> MINUS np_updateUMINUSTRUE constante .

    OPMATRIZ        reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    PLUS            reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    MINUS           reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    MULTIPLY        reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    DIVIDE          reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    LOGIC           reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    RELOP           reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    SEMICOLON       reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    COMA            reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    CPAREN          reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    CCORCH          reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)
    HAZ             reduce using rule 100 (termino1 -> MINUS np_updateUMINUSTRUE constante .)


state 197

    (89) termino -> termino1 OPMATRIZ np_insertarOperador .

    PLUS            reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    MINUS           reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    MULTIPLY        reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    DIVIDE          reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    LOGIC           reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    RELOP           reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    SEMICOLON       reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    COMA            reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    CPAREN          reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    CCORCH          reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    HAZ             reduce using rule 89 (termino -> termino1 OPMATRIZ np_insertarOperador .)


state 198

    (97) termino1 -> OPAREN np_insertarOperador expresion . CPAREN np_insertarOperador
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion

    CPAREN          shift and go to state 233
    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154


state 199

    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO . np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO . np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
    (134) np_addConstanteINT -> .

    CCORCH          reduce using rule 134 (np_addConstanteINT -> .)
    COMA            reduce using rule 134 (np_addConstanteINT -> .)

    np_addConstanteINT             shift and go to state 234

state 200

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 235


state 201

    (35) declaracionFuncionVariables -> empty .

    OBRACKET        reduce using rule 35 (declaracionFuncionVariables -> empty .)


state 202

    (36) declaracionFuncionVariables -> declaracion .

    OBRACKET        reduce using rule 36 (declaracionFuncionVariables -> declaracion .)


state 203

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (146) np_quitarFondo -> .

    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 236

state 204

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (146) np_quitarFondo -> .

    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 237

state 205

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (146) np_quitarFondo -> .

    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 238

state 206

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 239


state 207

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 240


state 208

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 241


state 209

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas .

    $end            reduce using rule 7 (principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas .)


state 210

    (129) return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON . np_return
    (131) np_return -> .

    REGRESA         reduce using rule 131 (np_return -> .)
    VAR             reduce using rule 131 (np_return -> .)
    DESDE           reduce using rule 131 (np_return -> .)
    MIENTRAS        reduce using rule 131 (np_return -> .)
    LEE             reduce using rule 131 (np_return -> .)
    ESCRIBE         reduce using rule 131 (np_return -> .)
    SI              reduce using rule 131 (np_return -> .)
    ID              reduce using rule 131 (np_return -> .)
    CBRACKET        reduce using rule 131 (np_return -> .)

    np_return                      shift and go to state 242

state 211

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA . np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (122) np_iniciaFor -> .

    CARACT          reduce using rule 122 (np_iniciaFor -> .)
    OPAREN          reduce using rule 122 (np_iniciaFor -> .)
    MINUS           reduce using rule 122 (np_iniciaFor -> .)
    ID              reduce using rule 122 (np_iniciaFor -> .)
    ENTERO          reduce using rule 122 (np_iniciaFor -> .)
    FLOTANTE        reduce using rule 122 (np_iniciaFor -> .)

    np_iniciaFor                   shift and go to state 243

state 212

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN . paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (70) paramsLlamada1 -> . empty
    (71) paramsLlamada1 -> . paramsLlamada2
    (149) empty -> .
    (72) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam
    (73) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
    (145) np_agregarFondo -> .

    CPAREN          reduce using rule 149 (empty -> .)
    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    paramsLlamada1                 shift and go to state 244
    empty                          shift and go to state 245
    paramsLlamada2                 shift and go to state 246
    np_agregarFondo                shift and go to state 247

state 213

    (101) posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .

    ASSIGN          reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    OPMATRIZ        reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    PLUS            reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    MINUS           reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    MULTIPLY        reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    DIVIDE          reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    LOGIC           reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    RELOP           reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    SEMICOLON       reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    COMA            reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    CPAREN          reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    CCORCH          reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)
    HAZ             reduce using rule 101 (posibleID -> ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual .)


state 214

    (102) posibleID2 -> OCORCH np_agregarFondo . expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 248
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 215

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion . np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 249

state 216

    (76) lectura -> LEE OPAREN posibleID np_read lectura2 . CPAREN SEMICOLON

    CPAREN          shift and go to state 250


state 217

    (77) lectura2 -> empty .

    CPAREN          reduce using rule 77 (lectura2 -> empty .)


state 218

    (78) lectura2 -> COMA . posibleID np_read lectura2
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    ID              shift and go to state 145

    posibleID                      shift and go to state 251

state 219

    (80) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo . expresion np_quitarFondo np_quitarFondo SEMICOLON
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    posibleID                      shift and go to state 120
    expresion                      shift and go to state 252
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 220

    (50) escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .

    REGRESA         reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    VAR             reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    DESDE           reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    LEE             reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    SI              reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    ID              reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    CBRACKET        reduce using rule 50 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)


state 221

    (52) escritura2 -> np_agregarFondo expresion np_quitarFondo . np_print escritura3
    (57) np_print -> .

    COMA            reduce using rule 57 (np_print -> .)
    CPAREN          reduce using rule 57 (np_print -> .)

    np_print                       shift and go to state 253

state 222

    (53) escritura2 -> STRING np_printStr escritura3 .

    CPAREN          reduce using rule 53 (escritura2 -> STRING np_printStr escritura3 .)


state 223

    (54) escritura3 -> empty .

    CPAREN          reduce using rule 54 (escritura3 -> empty .)


state 224

    (55) escritura3 -> COMA . np_agregarFondo expresion np_quitarFondo np_print escritura3
    (56) escritura3 -> COMA . STRING np_printStr escritura3
    (145) np_agregarFondo -> .

    STRING          shift and go to state 255
    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 254

state 225

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo . np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo . np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (61) np_iniciaIf -> .

    CPAREN          reduce using rule 61 (np_iniciaIf -> .)

    np_iniciaIf                    shift and go to state 256

state 226

    (19) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .

    VAR             reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    FUNCION         reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    PRINCIPAL       reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    REGRESA         reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    DESDE           reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    MIENTRAS        reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    LEE             reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    ESCRIBE         reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    SI              reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    ID              reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    CBRACKET        reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    OBRACKET        reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)


state 227

    (81) expresion -> expresion LOGIC np_insertarOperador expresion .
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion

  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for RELOP resolved as shift
    SEMICOLON       reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    COMA            reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    CPAREN          reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    CCORCH          reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    HAZ             reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154

  ! LOGIC           [ reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .) ]
  ! RELOP           [ reduce using rule 81 (expresion -> expresion LOGIC np_insertarOperador expresion .) ]


state 228

    (82) expresion -> expresion RELOP np_insertarOperador expresion .
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion

  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for RELOP resolved as shift
    SEMICOLON       reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .)
    COMA            reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .)
    CPAREN          reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .)
    CCORCH          reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .)
    HAZ             reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .)
    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154

  ! LOGIC           [ reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .) ]
  ! RELOP           [ reduce using rule 82 (expresion -> expresion RELOP np_insertarOperador expresion .) ]


state 229

    (84) termino -> termino PLUS np_insertarOperador termino .
    (84) termino -> termino . PLUS np_insertarOperador termino
    (85) termino -> termino . MINUS np_insertarOperador termino
    (86) termino -> termino . MULTIPLY np_insertarOperador termino
    (87) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    MINUS           reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    LOGIC           reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    RELOP           reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    SEMICOLON       reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    COMA            reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    CPAREN          reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    CCORCH          reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    HAZ             reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .)
    MULTIPLY        shift and go to state 157
    DIVIDE          shift and go to state 158

  ! MULTIPLY        [ reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .) ]
  ! DIVIDE          [ reduce using rule 84 (termino -> termino PLUS np_insertarOperador termino .) ]
  ! PLUS            [ shift and go to state 155 ]
  ! MINUS           [ shift and go to state 156 ]


state 230

    (85) termino -> termino MINUS np_insertarOperador termino .
    (84) termino -> termino . PLUS np_insertarOperador termino
    (85) termino -> termino . MINUS np_insertarOperador termino
    (86) termino -> termino . MULTIPLY np_insertarOperador termino
    (87) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    MINUS           reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    LOGIC           reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    RELOP           reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    SEMICOLON       reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    COMA            reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    CPAREN          reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    CCORCH          reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    HAZ             reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .)
    MULTIPLY        shift and go to state 157
    DIVIDE          shift and go to state 158

  ! MULTIPLY        [ reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .) ]
  ! DIVIDE          [ reduce using rule 85 (termino -> termino MINUS np_insertarOperador termino .) ]
  ! PLUS            [ shift and go to state 155 ]
  ! MINUS           [ shift and go to state 156 ]


state 231

    (86) termino -> termino MULTIPLY np_insertarOperador termino .
    (84) termino -> termino . PLUS np_insertarOperador termino
    (85) termino -> termino . MINUS np_insertarOperador termino
    (86) termino -> termino . MULTIPLY np_insertarOperador termino
    (87) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    MINUS           reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    MULTIPLY        reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    DIVIDE          reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    LOGIC           reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    RELOP           reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    SEMICOLON       reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    COMA            reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    CPAREN          reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    CCORCH          reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)
    HAZ             reduce using rule 86 (termino -> termino MULTIPLY np_insertarOperador termino .)

  ! PLUS            [ shift and go to state 155 ]
  ! MINUS           [ shift and go to state 156 ]
  ! MULTIPLY        [ shift and go to state 157 ]
  ! DIVIDE          [ shift and go to state 158 ]


state 232

    (87) termino -> termino DIVIDE np_insertarOperador termino .
    (84) termino -> termino . PLUS np_insertarOperador termino
    (85) termino -> termino . MINUS np_insertarOperador termino
    (86) termino -> termino . MULTIPLY np_insertarOperador termino
    (87) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    MINUS           reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    MULTIPLY        reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    DIVIDE          reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    LOGIC           reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    RELOP           reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    SEMICOLON       reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    COMA            reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    CPAREN          reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    CCORCH          reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)
    HAZ             reduce using rule 87 (termino -> termino DIVIDE np_insertarOperador termino .)

  ! PLUS            [ shift and go to state 155 ]
  ! MINUS           [ shift and go to state 156 ]
  ! MULTIPLY        [ shift and go to state 157 ]
  ! DIVIDE          [ shift and go to state 158 ]


state 233

    (97) termino1 -> OPAREN np_insertarOperador expresion CPAREN . np_insertarOperador
    (88) np_insertarOperador -> .

    OPMATRIZ        reduce using rule 88 (np_insertarOperador -> .)
    PLUS            reduce using rule 88 (np_insertarOperador -> .)
    MINUS           reduce using rule 88 (np_insertarOperador -> .)
    MULTIPLY        reduce using rule 88 (np_insertarOperador -> .)
    DIVIDE          reduce using rule 88 (np_insertarOperador -> .)
    LOGIC           reduce using rule 88 (np_insertarOperador -> .)
    RELOP           reduce using rule 88 (np_insertarOperador -> .)
    SEMICOLON       reduce using rule 88 (np_insertarOperador -> .)
    COMA            reduce using rule 88 (np_insertarOperador -> .)
    CPAREN          reduce using rule 88 (np_insertarOperador -> .)
    CCORCH          reduce using rule 88 (np_insertarOperador -> .)
    HAZ             reduce using rule 88 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 257

state 234

    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT . np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT . np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
    (116) np_asignarD1 -> .

    CCORCH          reduce using rule 116 (np_asignarD1 -> .)
    COMA            reduce using rule 116 (np_asignarD1 -> .)

    np_asignarD1                   shift and go to state 258

state 235

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 259
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 236

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    COMA            shift and go to state 262
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 260
    empty                          shift and go to state 261

state 237

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    COMA            shift and go to state 262
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 263
    empty                          shift and go to state 261

state 238

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    COMA            shift and go to state 262
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 264
    empty                          shift and go to state 261

state 239

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 265
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 240

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 266
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 241

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 267
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 242

    (129) return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .

    REGRESA         reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    VAR             reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    DESDE           reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    MIENTRAS        reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    LEE             reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    ESCRIBE         reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    SI              reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    ID              reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    CBRACKET        reduce using rule 129 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)


state 243

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor . np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 268

state 244

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 . CPAREN np_quitarFondoParam np_goSUB

    CPAREN          shift and go to state 269


state 245

    (70) paramsLlamada1 -> empty .

    CPAREN          reduce using rule 70 (paramsLlamada1 -> empty .)


state 246

    (71) paramsLlamada1 -> paramsLlamada2 .

    CPAREN          reduce using rule 71 (paramsLlamada1 -> paramsLlamada2 .)


state 247

    (72) paramsLlamada2 -> np_agregarFondo . expresion np_quitarFondo np_resolverParam
    (73) paramsLlamada2 -> np_agregarFondo . expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 270
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 248

    (102) posibleID2 -> OCORCH np_agregarFondo expresion . np_quitarFondo np_verificarD1 posibleID3 CCORCH
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CCORCH          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 271

state 249

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo . CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    CPAREN          shift and go to state 272


state 250

    (76) lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN . SEMICOLON

    SEMICOLON       shift and go to state 273


state 251

    (78) lectura2 -> COMA posibleID . np_read lectura2
    (79) np_read -> .

    COMA            reduce using rule 79 (np_read -> .)
    CPAREN          reduce using rule 79 (np_read -> .)

    np_read                        shift and go to state 274

state 252

    (80) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion . np_quitarFondo np_quitarFondo SEMICOLON
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    SEMICOLON       reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 275

state 253

    (52) escritura2 -> np_agregarFondo expresion np_quitarFondo np_print . escritura3
    (54) escritura3 -> . empty
    (55) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (56) escritura3 -> . COMA STRING np_printStr escritura3
    (149) empty -> .

    COMA            shift and go to state 224
    CPAREN          reduce using rule 149 (empty -> .)

    escritura3                     shift and go to state 276
    empty                          shift and go to state 223

state 254

    (55) escritura3 -> COMA np_agregarFondo . expresion np_quitarFondo np_print escritura3
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 277
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 255

    (56) escritura3 -> COMA STRING . np_printStr escritura3
    (58) np_printStr -> .

    COMA            reduce using rule 58 (np_printStr -> .)
    CPAREN          reduce using rule 58 (np_printStr -> .)

    np_printStr                    shift and go to state 278

state 256

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf . CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf . CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf

    CPAREN          shift and go to state 279


state 257

    (97) termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .

    OPMATRIZ        reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    PLUS            reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    MINUS           reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    MULTIPLY        reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    DIVIDE          reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    LOGIC           reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    RELOP           reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    SEMICOLON       reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    COMA            reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    CPAREN          reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    CCORCH          reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    HAZ             reduce using rule 97 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)


state 258

    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 . CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 . COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    CCORCH          shift and go to state 280
    COMA            shift and go to state 281


state 259

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 282


state 260

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 28 (declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 261

    (31) declaracionFuncionParametros2 -> empty .

    CPAREN          reduce using rule 31 (declaracionFuncionParametros2 -> empty .)


state 262

    (32) declaracionFuncionParametros2 -> COMA . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> COMA . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> COMA . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2

    INT             shift and go to state 283
    FLOAT           shift and go to state 284
    CHAR            shift and go to state 285


state 263

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 29 (declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 264

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 30 (declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 265

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 286


state 266

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 287


state 267

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 288


state 268

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo . expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 289
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 269

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN . np_quitarFondoParam np_goSUB
    (69) np_quitarFondoParam -> .

    SEMICOLON       reduce using rule 69 (np_quitarFondoParam -> .)
    OPMATRIZ        reduce using rule 69 (np_quitarFondoParam -> .)
    PLUS            reduce using rule 69 (np_quitarFondoParam -> .)
    MINUS           reduce using rule 69 (np_quitarFondoParam -> .)
    MULTIPLY        reduce using rule 69 (np_quitarFondoParam -> .)
    DIVIDE          reduce using rule 69 (np_quitarFondoParam -> .)
    LOGIC           reduce using rule 69 (np_quitarFondoParam -> .)
    RELOP           reduce using rule 69 (np_quitarFondoParam -> .)
    COMA            reduce using rule 69 (np_quitarFondoParam -> .)
    CPAREN          reduce using rule 69 (np_quitarFondoParam -> .)
    CCORCH          reduce using rule 69 (np_quitarFondoParam -> .)
    HAZ             reduce using rule 69 (np_quitarFondoParam -> .)

    np_quitarFondoParam            shift and go to state 290

state 270

    (72) paramsLlamada2 -> np_agregarFondo expresion . np_quitarFondo np_resolverParam
    (73) paramsLlamada2 -> np_agregarFondo expresion . np_quitarFondo np_resolverParam COMA paramsLlamada2
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 291

state 271

    (102) posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo . np_verificarD1 posibleID3 CCORCH
    (111) np_verificarD1 -> .

    COMA            reduce using rule 111 (np_verificarD1 -> .)
    CCORCH          reduce using rule 111 (np_verificarD1 -> .)

    np_verificarD1                 shift and go to state 292

state 272

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN . HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    HAZ             shift and go to state 293


state 273

    (76) lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .

    REGRESA         reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    VAR             reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    DESDE           reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    LEE             reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    SI              reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    ID              reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    CBRACKET        reduce using rule 76 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)


state 274

    (78) lectura2 -> COMA posibleID np_read . lectura2
    (77) lectura2 -> . empty
    (78) lectura2 -> . COMA posibleID np_read lectura2
    (149) empty -> .

    COMA            shift and go to state 218
    CPAREN          reduce using rule 149 (empty -> .)

    lectura2                       shift and go to state 294
    empty                          shift and go to state 217

state 275

    (80) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo . np_quitarFondo SEMICOLON
    (146) np_quitarFondo -> .

    SEMICOLON       reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 295

state 276

    (52) escritura2 -> np_agregarFondo expresion np_quitarFondo np_print escritura3 .

    CPAREN          reduce using rule 52 (escritura2 -> np_agregarFondo expresion np_quitarFondo np_print escritura3 .)


state 277

    (55) escritura3 -> COMA np_agregarFondo expresion . np_quitarFondo np_print escritura3
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 296

state 278

    (56) escritura3 -> COMA STRING np_printStr . escritura3
    (54) escritura3 -> . empty
    (55) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (56) escritura3 -> . COMA STRING np_printStr escritura3
    (149) empty -> .

    COMA            shift and go to state 224
    CPAREN          reduce using rule 149 (empty -> .)

    escritura3                     shift and go to state 297
    empty                          shift and go to state 223

state 279

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN . ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN . ENTONCES OBRACKET estatutos CBRACKET np_terminaIf

    ENTONCES        shift and go to state 298


state 280

    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH . np_asignarMemoria1
    (118) np_asignarMemoria1 -> .

    ASSIGN          reduce using rule 118 (np_asignarMemoria1 -> .)
    SEMICOLON       reduce using rule 118 (np_asignarMemoria1 -> .)
    COMA            reduce using rule 118 (np_asignarMemoria1 -> .)
    CPAREN          reduce using rule 118 (np_asignarMemoria1 -> .)

    np_asignarMemoria1             shift and go to state 299

state 281

    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA . ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ENTERO          shift and go to state 300


state 282

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 301

state 283

    (32) declaracionFuncionParametros2 -> COMA INT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 302

state 284

    (33) declaracionFuncionParametros2 -> COMA FLOAT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 303

state 285

    (34) declaracionFuncionParametros2 -> COMA CHAR . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 304

state 286

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 305

state 287

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 306

state 288

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 307

state 289

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion . np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    HAZ             reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 308

state 290

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam . np_goSUB
    (75) np_goSUB -> .

    SEMICOLON       reduce using rule 75 (np_goSUB -> .)
    OPMATRIZ        reduce using rule 75 (np_goSUB -> .)
    PLUS            reduce using rule 75 (np_goSUB -> .)
    MINUS           reduce using rule 75 (np_goSUB -> .)
    MULTIPLY        reduce using rule 75 (np_goSUB -> .)
    DIVIDE          reduce using rule 75 (np_goSUB -> .)
    LOGIC           reduce using rule 75 (np_goSUB -> .)
    RELOP           reduce using rule 75 (np_goSUB -> .)
    COMA            reduce using rule 75 (np_goSUB -> .)
    CPAREN          reduce using rule 75 (np_goSUB -> .)
    CCORCH          reduce using rule 75 (np_goSUB -> .)
    HAZ             reduce using rule 75 (np_goSUB -> .)

    np_goSUB                       shift and go to state 309

state 291

    (72) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo . np_resolverParam
    (73) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo . np_resolverParam COMA paramsLlamada2
    (74) np_resolverParam -> .

    COMA            reduce using rule 74 (np_resolverParam -> .)
    CPAREN          reduce using rule 74 (np_resolverParam -> .)

    np_resolverParam               shift and go to state 310

state 292

    (102) posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 . posibleID3 CCORCH
    (104) posibleID3 -> . COMA np_agregarFondo expresion np_quitarFondo np_verificarD2 np_enviarACuadruplos4
    (105) posibleID3 -> . np_enviarACuadruplos3
    (141) np_enviarACuadruplos3 -> .

    COMA            shift and go to state 312
    CCORCH          reduce using rule 141 (np_enviarACuadruplos3 -> .)

    posibleID3                     shift and go to state 311
    np_enviarACuadruplos3          shift and go to state 313

state 293

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ . OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    OBRACKET        shift and go to state 314


state 294

    (78) lectura2 -> COMA posibleID np_read lectura2 .

    CPAREN          reduce using rule 78 (lectura2 -> COMA posibleID np_read lectura2 .)


state 295

    (80) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo . SEMICOLON

    SEMICOLON       shift and go to state 315


state 296

    (55) escritura3 -> COMA np_agregarFondo expresion np_quitarFondo . np_print escritura3
    (57) np_print -> .

    COMA            reduce using rule 57 (np_print -> .)
    CPAREN          reduce using rule 57 (np_print -> .)

    np_print                       shift and go to state 316

state 297

    (56) escritura3 -> COMA STRING np_printStr escritura3 .

    CPAREN          reduce using rule 56 (escritura3 -> COMA STRING np_printStr escritura3 .)


state 298

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES . OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES . OBRACKET estatutos CBRACKET np_terminaIf

    OBRACKET        shift and go to state 317


state 299

    (114) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1 .

    ASSIGN          reduce using rule 114 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1 .)
    SEMICOLON       reduce using rule 114 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1 .)
    COMA            reduce using rule 114 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1 .)
    CPAREN          reduce using rule 114 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1 .)


state 300

    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO . np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2
    (134) np_addConstanteINT -> .

    CCORCH          reduce using rule 134 (np_addConstanteINT -> .)

    np_addConstanteINT             shift and go to state 318

state 301

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 20 (declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 20 (declaracionFuncion -> FUNCION VOID ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 302

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 319

state 303

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 320

state 304

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (145) np_agregarFondo -> .

    ID              reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 321

state 305

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 21 (declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 21 (declaracionFuncion -> FUNCION INT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 306

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 22 (declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 22 (declaracionFuncion -> FUNCION FLOAT ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 307

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 23 (declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 23 (declaracionFuncion -> FUNCION CHAR ID np_declfunc np_comienzaFunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 308

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo . np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (123) np_forFalso -> .

    HAZ             reduce using rule 123 (np_forFalso -> .)

    np_forFalso                    shift and go to state 322

state 309

    (65) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .

    SEMICOLON       reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    OPMATRIZ        reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    PLUS            reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    MINUS           reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    MULTIPLY        reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    DIVIDE          reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    LOGIC           reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    RELOP           reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    COMA            reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    CPAREN          reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    CCORCH          reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    HAZ             reduce using rule 65 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)


state 310

    (72) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam .
    (73) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam . COMA paramsLlamada2

    CPAREN          reduce using rule 72 (paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam .)
    COMA            shift and go to state 323


state 311

    (102) posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 . CCORCH

    CCORCH          shift and go to state 324


state 312

    (104) posibleID3 -> COMA . np_agregarFondo expresion np_quitarFondo np_verificarD2 np_enviarACuadruplos4
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 325

state 313

    (105) posibleID3 -> np_enviarACuadruplos3 .

    CCORCH          reduce using rule 105 (posibleID3 -> np_enviarACuadruplos3 .)


state 314

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET . npWhileInicia estatutos CBRACKET npWhileTermina
    (127) npWhileInicia -> .

    REGRESA         reduce using rule 127 (npWhileInicia -> .)
    VAR             reduce using rule 127 (npWhileInicia -> .)
    DESDE           reduce using rule 127 (npWhileInicia -> .)
    MIENTRAS        reduce using rule 127 (npWhileInicia -> .)
    LEE             reduce using rule 127 (npWhileInicia -> .)
    ESCRIBE         reduce using rule 127 (npWhileInicia -> .)
    SI              reduce using rule 127 (npWhileInicia -> .)
    ID              reduce using rule 127 (npWhileInicia -> .)
    CBRACKET        reduce using rule 127 (npWhileInicia -> .)

    npWhileInicia                  shift and go to state 326

state 315

    (80) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .

    REGRESA         reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    VAR             reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    DESDE           reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    MIENTRAS        reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    LEE             reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    ESCRIBE         reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    SI              reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    ID              reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    CBRACKET        reduce using rule 80 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)


state 316

    (55) escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print . escritura3
    (54) escritura3 -> . empty
    (55) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (56) escritura3 -> . COMA STRING np_printStr escritura3
    (149) empty -> .

    COMA            shift and go to state 224
    CPAREN          reduce using rule 149 (empty -> .)

    escritura3                     shift and go to state 327
    empty                          shift and go to state 223

state 317

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET . estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET . estatutos CBRACKET np_terminaIf
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 328
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 318

    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT . np_asignarD2 CCORCH np_asignarMemoria2
    (117) np_asignarD2 -> .

    CCORCH          reduce using rule 117 (np_asignarD2 -> .)

    np_asignarD2                   shift and go to state 329

state 319

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 330

state 320

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 331

state 321

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (113) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (114) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 CCORCH np_asignarMemoria1
    (115) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 332

state 322

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso . HAZ OBRACKET estatutos CBRACKET np_terminaFor

    HAZ             shift and go to state 333


state 323

    (73) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA . paramsLlamada2
    (72) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam
    (73) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
    (145) np_agregarFondo -> .

    CARACT          reduce using rule 145 (np_agregarFondo -> .)
    OPAREN          reduce using rule 145 (np_agregarFondo -> .)
    MINUS           reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    ENTERO          reduce using rule 145 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 247
    paramsLlamada2                 shift and go to state 334

state 324

    (102) posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .

    ASSIGN          reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    OPMATRIZ        reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    PLUS            reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    MINUS           reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    MULTIPLY        reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    DIVIDE          reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    LOGIC           reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    RELOP           reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    SEMICOLON       reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    COMA            reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    CPAREN          reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    CCORCH          reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)
    HAZ             reduce using rule 102 (posibleID2 -> OCORCH np_agregarFondo expresion np_quitarFondo np_verificarD1 posibleID3 CCORCH .)


state 325

    (104) posibleID3 -> COMA np_agregarFondo . expresion np_quitarFondo np_verificarD2 np_enviarACuadruplos4
    (81) expresion -> . expresion LOGIC np_insertarOperador expresion
    (82) expresion -> . expresion RELOP np_insertarOperador expresion
    (83) expresion -> . termino
    (84) termino -> . termino PLUS np_insertarOperador termino
    (85) termino -> . termino MINUS np_insertarOperador termino
    (86) termino -> . termino MULTIPLY np_insertarOperador termino
    (87) termino -> . termino DIVIDE np_insertarOperador termino
    (89) termino -> . termino1 OPMATRIZ np_insertarOperador
    (90) termino -> . termino1 np_updateUMINUSFALSE
    (93) termino1 -> . posibleID
    (94) termino1 -> . constante
    (95) termino1 -> . CARACT np_addConstanteCHAR
    (96) termino1 -> . llamadaFuncion
    (97) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (100) termino1 -> . MINUS np_updateUMINUSTRUE constante
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual
    (98) constante -> . ENTERO np_addConstanteINT
    (99) constante -> . FLOTANTE np_addConstanteFLOAT
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    CARACT          shift and go to state 122
    OPAREN          shift and go to state 124
    MINUS           shift and go to state 118
    ID              shift and go to state 125
    ENTERO          shift and go to state 126
    FLOTANTE        shift and go to state 127

    expresion                      shift and go to state 335
    termino                        shift and go to state 117
    termino1                       shift and go to state 119
    posibleID                      shift and go to state 120
    constante                      shift and go to state 121
    llamadaFuncion                 shift and go to state 123

state 326

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia . estatutos CBRACKET npWhileTermina
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 336
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 327

    (55) escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print escritura3 .

    CPAREN          reduce using rule 55 (escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print escritura3 .)


state 328

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos . CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos . CBRACKET np_terminaIf

    CBRACKET        shift and go to state 337


state 329

    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 . CCORCH np_asignarMemoria2

    CCORCH          shift and go to state 338


state 330

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (146) np_quitarFondo -> .

    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 339

state 331

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (146) np_quitarFondo -> .

    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 340

state 332

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (146) np_quitarFondo -> .

    COMA            reduce using rule 146 (np_quitarFondo -> .)
    CPAREN          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 341

state 333

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ . OBRACKET estatutos CBRACKET np_terminaFor

    OBRACKET        shift and go to state 342


state 334

    (73) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2 .

    CPAREN          reduce using rule 73 (paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2 .)


state 335

    (104) posibleID3 -> COMA np_agregarFondo expresion . np_quitarFondo np_verificarD2 np_enviarACuadruplos4
    (81) expresion -> expresion . LOGIC np_insertarOperador expresion
    (82) expresion -> expresion . RELOP np_insertarOperador expresion
    (146) np_quitarFondo -> .

    LOGIC           shift and go to state 153
    RELOP           shift and go to state 154
    CCORCH          reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 343

state 336

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos . CBRACKET npWhileTermina

    CBRACKET        shift and go to state 344


state 337

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET . SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET . np_terminaIf
    (62) np_terminaIf -> .

    SINO            shift and go to state 345
    REGRESA         reduce using rule 62 (np_terminaIf -> .)
    VAR             reduce using rule 62 (np_terminaIf -> .)
    DESDE           reduce using rule 62 (np_terminaIf -> .)
    MIENTRAS        reduce using rule 62 (np_terminaIf -> .)
    LEE             reduce using rule 62 (np_terminaIf -> .)
    ESCRIBE         reduce using rule 62 (np_terminaIf -> .)
    SI              reduce using rule 62 (np_terminaIf -> .)
    ID              reduce using rule 62 (np_terminaIf -> .)
    CBRACKET        reduce using rule 62 (np_terminaIf -> .)

    np_terminaIf                   shift and go to state 346

state 338

    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH . np_asignarMemoria2
    (119) np_asignarMemoria2 -> .

    ASSIGN          reduce using rule 119 (np_asignarMemoria2 -> .)
    SEMICOLON       reduce using rule 119 (np_asignarMemoria2 -> .)
    COMA            reduce using rule 119 (np_asignarMemoria2 -> .)
    CPAREN          reduce using rule 119 (np_asignarMemoria2 -> .)

    np_asignarMemoria2             shift and go to state 347

state 339

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    COMA            shift and go to state 262
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 348
    empty                          shift and go to state 261

state 340

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    COMA            shift and go to state 262
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 349
    empty                          shift and go to state 261

state 341

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (149) empty -> .

    COMA            shift and go to state 262
    CPAREN          reduce using rule 149 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 350
    empty                          shift and go to state 261

state 342

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET . estatutos CBRACKET np_terminaFor
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 351
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 343

    (104) posibleID3 -> COMA np_agregarFondo expresion np_quitarFondo . np_verificarD2 np_enviarACuadruplos4
    (112) np_verificarD2 -> .

    CCORCH          reduce using rule 112 (np_verificarD2 -> .)

    np_verificarD2                 shift and go to state 352

state 344

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET . npWhileTermina
    (128) npWhileTermina -> .

    REGRESA         reduce using rule 128 (npWhileTermina -> .)
    VAR             reduce using rule 128 (npWhileTermina -> .)
    DESDE           reduce using rule 128 (npWhileTermina -> .)
    MIENTRAS        reduce using rule 128 (npWhileTermina -> .)
    LEE             reduce using rule 128 (npWhileTermina -> .)
    ESCRIBE         reduce using rule 128 (npWhileTermina -> .)
    SI              reduce using rule 128 (npWhileTermina -> .)
    ID              reduce using rule 128 (npWhileTermina -> .)
    CBRACKET        reduce using rule 128 (npWhileTermina -> .)

    npWhileTermina                 shift and go to state 353

state 345

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO . OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET

    OBRACKET        shift and go to state 354


state 346

    (60) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .

    REGRESA         reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    VAR             reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    DESDE           reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    MIENTRAS        reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    LEE             reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    ESCRIBE         reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    SI              reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    ID              reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    CBRACKET        reduce using rule 60 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)


state 347

    (115) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2 .

    ASSIGN          reduce using rule 115 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2 .)
    SEMICOLON       reduce using rule 115 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2 .)
    COMA            reduce using rule 115 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2 .)
    CPAREN          reduce using rule 115 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarD1 COMA ENTERO np_addConstanteINT np_asignarD2 CCORCH np_asignarMemoria2 .)


state 348

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 32 (declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 349

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 33 (declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 350

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 34 (declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 351

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos . CBRACKET np_terminaFor

    CBRACKET        shift and go to state 355


state 352

    (104) posibleID3 -> COMA np_agregarFondo expresion np_quitarFondo np_verificarD2 . np_enviarACuadruplos4
    (142) np_enviarACuadruplos4 -> .

    CCORCH          reduce using rule 142 (np_enviarACuadruplos4 -> .)

    np_enviarACuadruplos4          shift and go to state 356

state 353

    (125) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .

    REGRESA         reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    VAR             reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    DESDE           reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    MIENTRAS        reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    LEE             reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    ESCRIBE         reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    SI              reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    ID              reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    CBRACKET        reduce using rule 125 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)


state 354

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET . np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (63) np_iniciaElse -> .

    REGRESA         reduce using rule 63 (np_iniciaElse -> .)
    VAR             reduce using rule 63 (np_iniciaElse -> .)
    DESDE           reduce using rule 63 (np_iniciaElse -> .)
    MIENTRAS        reduce using rule 63 (np_iniciaElse -> .)
    LEE             reduce using rule 63 (np_iniciaElse -> .)
    ESCRIBE         reduce using rule 63 (np_iniciaElse -> .)
    SI              reduce using rule 63 (np_iniciaElse -> .)
    ID              reduce using rule 63 (np_iniciaElse -> .)
    CBRACKET        reduce using rule 63 (np_iniciaElse -> .)

    np_iniciaElse                  shift and go to state 357

state 355

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET . np_terminaFor
    (124) np_terminaFor -> .

    REGRESA         reduce using rule 124 (np_terminaFor -> .)
    VAR             reduce using rule 124 (np_terminaFor -> .)
    DESDE           reduce using rule 124 (np_terminaFor -> .)
    MIENTRAS        reduce using rule 124 (np_terminaFor -> .)
    LEE             reduce using rule 124 (np_terminaFor -> .)
    ESCRIBE         reduce using rule 124 (np_terminaFor -> .)
    SI              reduce using rule 124 (np_terminaFor -> .)
    ID              reduce using rule 124 (np_terminaFor -> .)
    CBRACKET        reduce using rule 124 (np_terminaFor -> .)

    np_terminaFor                  shift and go to state 358

state 356

    (104) posibleID3 -> COMA np_agregarFondo expresion np_quitarFondo np_verificarD2 np_enviarACuadruplos4 .

    CCORCH          reduce using rule 104 (posibleID3 -> COMA np_agregarFondo expresion np_quitarFondo np_verificarD2 np_enviarACuadruplos4 .)


state 357

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse . np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (145) np_agregarFondo -> .

    REGRESA         reduce using rule 145 (np_agregarFondo -> .)
    VAR             reduce using rule 145 (np_agregarFondo -> .)
    DESDE           reduce using rule 145 (np_agregarFondo -> .)
    MIENTRAS        reduce using rule 145 (np_agregarFondo -> .)
    LEE             reduce using rule 145 (np_agregarFondo -> .)
    ESCRIBE         reduce using rule 145 (np_agregarFondo -> .)
    SI              reduce using rule 145 (np_agregarFondo -> .)
    ID              reduce using rule 145 (np_agregarFondo -> .)
    CBRACKET        reduce using rule 145 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 359

state 358

    (120) estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .

    REGRESA         reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    VAR             reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    DESDE           reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    MIENTRAS        reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    LEE             reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    ESCRIBE         reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    SI              reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    ID              reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    CBRACKET        reduce using rule 120 (estatutoRepeticionIncondicional -> DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)


state 359

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo . estatutos np_quitarFondo np_terminaElse CBRACKET
    (40) estatutos -> . return estatutos
    (41) estatutos -> . empty
    (42) estatutos -> . declaracion estatutos
    (43) estatutos -> . estatutoRepeticionIncondicional estatutos
    (44) estatutos -> . estatutoRepeticionCondicional estatutos
    (45) estatutos -> . lectura estatutos
    (46) estatutos -> . asignacion estatutos
    (47) estatutos -> . escritura estatutos
    (48) estatutos -> . decision estatutos
    (49) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (129) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (130) return -> . REGRESA SEMICOLON np_returnVOID
    (149) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (120) estatutoRepeticionIncondicional -> . DESDE ID np_verificarValorUnico np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (125) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (76) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (80) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (50) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (60) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (65) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (101) posibleID -> . ID np_defIDActual np_contieneID posibleID2 np_quitarIDActual

    REGRESA         shift and go to state 75
    CBRACKET        reduce using rule 149 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 76
    MIENTRAS        shift and go to state 78
    LEE             shift and go to state 79
    ESCRIBE         shift and go to state 81
    SI              shift and go to state 82
    ID              shift and go to state 77

    estatutos                      shift and go to state 360
    return                         shift and go to state 65
    empty                          shift and go to state 66
    declaracion                    shift and go to state 67
    estatutoRepeticionIncondicional shift and go to state 68
    estatutoRepeticionCondicional  shift and go to state 69
    lectura                        shift and go to state 70
    asignacion                     shift and go to state 71
    escritura                      shift and go to state 72
    decision                       shift and go to state 73
    llamadaFuncion                 shift and go to state 74
    posibleID                      shift and go to state 80

state 360

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos . np_quitarFondo np_terminaElse CBRACKET
    (146) np_quitarFondo -> .

    CBRACKET        reduce using rule 146 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 361

state 361

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo . np_terminaElse CBRACKET
    (64) np_terminaElse -> .

    CBRACKET        reduce using rule 64 (np_terminaElse -> .)

    np_terminaElse                 shift and go to state 362

state 362

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse . CBRACKET

    CBRACKET        shift and go to state 363


state 363

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .

    REGRESA         reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    VAR             reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    DESDE           reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    MIENTRAS        reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    LEE             reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    ESCRIBE         reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    SI              reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    ID              reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    CBRACKET        reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOGIC in state 227 resolved as shift
WARNING: shift/reduce conflict for RELOP in state 227 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 228 resolved as shift
WARNING: shift/reduce conflict for RELOP in state 228 resolved as shift
