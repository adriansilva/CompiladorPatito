Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO
    IGNORE
    NEWLINE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA ID SEMICOLON programa2
Rule 2     programa2 -> declaracion programa2
Rule 3     programa2 -> np_gotoMain programa3
Rule 4     np_gotoMain -> <empty>
Rule 5     programa3 -> declaracionFuncion programa3
Rule 6     programa3 -> principal
Rule 7     principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas
Rule 8     np_updateMain -> <empty>
Rule 9     np_end -> <empty>
Rule 10    np_printTablas -> <empty>
Rule 11    declaracion -> VAR INT np_defineTipo COLON declaracion2
Rule 12    declaracion -> VAR FLOAT np_defineTipo COLON declaracion2
Rule 13    declaracion -> VAR CHAR np_defineTipo COLON declaracion2
Rule 14    np_defineTipo -> <empty>
Rule 15    declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3
Rule 16    declaracion3 -> np_quitarFondo SEMICOLON
Rule 17    declaracion3 -> np_quitarFondo COMA declaracion2
Rule 18    declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON
Rule 19    declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2
Rule 20    declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 21    declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 22    declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 23    declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
Rule 24    np_esParametro -> <empty>
Rule 25    np_yaNoEsParametro -> <empty>
Rule 26    np_endFunc -> <empty>
Rule 27    declaracionFuncionParametros -> empty
Rule 28    declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 29    declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 30    declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 31    declaracionFuncionParametros2 -> empty
Rule 32    declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 33    declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 34    declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
Rule 35    declaracionFuncionVariables -> empty
Rule 36    declaracionFuncionVariables -> declaracion
Rule 37    np_declfunc -> <empty>
Rule 38    np_declfuncprincipal -> <empty>
Rule 39    estatutos -> return estatutos
Rule 40    estatutos -> empty
Rule 41    estatutos -> declaracion estatutos
Rule 42    estatutos -> estatutoRepeticionIncondicional estatutos
Rule 43    estatutos -> estatutoRepeticionCondicional estatutos
Rule 44    estatutos -> lectura estatutos
Rule 45    estatutos -> asignacion estatutos
Rule 46    estatutos -> escritura estatutos
Rule 47    estatutos -> decision estatutos
Rule 48    estatutos -> llamadaFuncion SEMICOLON estatutos
Rule 49    escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
Rule 50    escritura2 -> empty
Rule 51    escritura2 -> np_agregarFondo expresion np_quitarFondo np_print escritura3
Rule 52    escritura2 -> STRING np_printStr escritura3
Rule 53    escritura3 -> empty
Rule 54    escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
Rule 55    escritura3 -> COMA STRING np_printStr escritura3
Rule 56    np_print -> <empty>
Rule 57    np_printStr -> <empty>
Rule 58    decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
Rule 59    decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
Rule 60    np_iniciaIf -> <empty>
Rule 61    np_terminaIf -> <empty>
Rule 62    np_iniciaElse -> <empty>
Rule 63    np_terminaElse -> <empty>
Rule 64    llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
Rule 65    np_existeFuncion -> <empty>
Rule 66    np_llamadaFuncion -> <empty>
Rule 67    np_agregarFondoParam -> <empty>
Rule 68    np_quitarFondoParam -> <empty>
Rule 69    paramsLlamada1 -> empty
Rule 70    paramsLlamada1 -> paramsLlamada2
Rule 71    paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam
Rule 72    paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
Rule 73    np_resolverParam -> <empty>
Rule 74    np_goSUB -> <empty>
Rule 75    lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
Rule 76    lectura2 -> empty
Rule 77    lectura2 -> COMA posibleID np_read lectura2
Rule 78    np_read -> <empty>
Rule 79    asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
Rule 80    expresion -> expresion LOGIC np_insertarOperador expresion
Rule 81    expresion -> expresion RELOP np_insertarOperador expresion
Rule 82    expresion -> termino
Rule 83    termino -> termino PLUS np_insertarOperador termino
Rule 84    termino -> termino MINUS np_insertarOperador termino
Rule 85    termino -> termino MULTIPLY np_insertarOperador termino
Rule 86    termino -> termino DIVIDE np_insertarOperador termino
Rule 87    np_insertarOperador -> <empty>
Rule 88    termino -> termino1 OPMATRIZ np_insertarOperador
Rule 89    termino -> termino1
Rule 90    termino1 -> posibleID
Rule 91    termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC
Rule 92    termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
Rule 93    termino1 -> llamadaFuncion
Rule 94    termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
Rule 95    termino1 -> QUOT CARACTER QUOT
Rule 96    posibleID -> ID np_contieneID np_enviarACuadruplos
Rule 97    posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
Rule 98    posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
Rule 99    posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
Rule 100   posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
Rule 101   posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
Rule 102   np_asignarDimensionX -> <empty>
Rule 103   np_asignarDimensionY -> <empty>
Rule 104   np_asignarMemoria1 -> <empty>
Rule 105   np_asignarMemoria2 -> <empty>
Rule 106   estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
Rule 107   np_iniciaFor -> <empty>
Rule 108   np_forFalso -> <empty>
Rule 109   np_terminaFor -> <empty>
Rule 110   estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
Rule 111   npWhileStExp -> <empty>
Rule 112   npWhileInicia -> <empty>
Rule 113   npWhileTermina -> <empty>
Rule 114   return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
Rule 115   return -> REGRESA SEMICOLON np_returnVOID
Rule 116   np_return -> <empty>
Rule 117   np_returnVOID -> <empty>
Rule 118   np_contieneID -> <empty>
Rule 119   np_addConstanteINT -> <empty>
Rule 120   np_addConstanteFLOAT -> <empty>
Rule 121   np_addVariableParametro -> <empty>
Rule 122   np_addVariable -> <empty>
Rule 123   np_enviarACuadruplos -> <empty>
Rule 124   np_enviarACuadruplosC -> <empty>
Rule 125   np_actualizarDimensiones -> <empty>
Rule 126   np_agregarFondo -> <empty>
Rule 127   np_quitarFondo -> <empty>
Rule 128   np_printCuadruplos -> <empty>
Rule 129   empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 18 19 79
CARACTER             : 95
CBRACKET             : 7 20 21 22 23 58 58 59 106 110
CCORCH               : 97 98 100 101
CHAR                 : 13 23 29 34
COLON                : 11 12 13
COMA                 : 17 19 32 33 34 54 55 72 77 98 101
COMENTARIO           : 
CPAREN               : 7 20 21 22 23 49 58 59 64 75 94 110
DESDE                : 106
DIVIDE               : 86
ENTERO               : 91 100 101 101
ENTONCES             : 58 59
ESCRIBE              : 49
FLOAT                : 12 22 30 33
FLOTANTE             : 92
FUNCION              : 20 21 22 23
HASTA                : 106
HAZ                  : 106 110
ID                   : 1 20 21 22 23 64 96 97 98 99 100 101 106
IGNORE               : 
INT                  : 11 21 28 32
LEE                  : 75
LOGIC                : 80
MIENTRAS             : 110
MINUS                : 84
MULTIPLY             : 85
NEWLINE              : 
OBRACKET             : 7 20 21 22 23 58 58 59 106 110
OCORCH               : 97 98 100 101
OPAREN               : 7 20 21 22 23 49 58 59 64 75 94 110
OPMATRIZ             : 88
PLUS                 : 83
PRINCIPAL            : 7
PROGRAMA             : 1
QUOT                 : 95 95
REGRESA              : 114 115
RELOP                : 81
SEMICOLON            : 1 16 18 48 49 75 79 114 115
SI                   : 58 59
SINO                 : 58
STRING               : 52 55
VAR                  : 11 12 13
VOID                 : 20
error                : 

Nonterminals, with rules where they appear

asignacion           : 45
decision             : 47
declaracion          : 2 36 41
declaracion2         : 11 12 13 17 19
declaracion3         : 15
declaracionFuncion   : 5
declaracionFuncionParametros : 20 21 22 23
declaracionFuncionParametros2 : 28 29 30 32 33 34
declaracionFuncionVariables : 20 21 22 23
empty                : 27 31 35 40 50 53 69 76
escritura            : 46
escritura2           : 49
escritura3           : 51 52 54 55
estatutoRepeticionCondicional : 43
estatutoRepeticionIncondicional : 42
estatutos            : 7 20 21 22 23 39 41 42 43 44 45 46 47 48 58 58 59 106 110
expresion            : 18 19 51 54 58 59 71 72 79 80 80 81 81 94 97 98 98 106 110 114
lectura              : 44
lectura2             : 75 77
llamadaFuncion       : 48 93
npWhileInicia        : 110
npWhileStExp         : 110
npWhileTermina       : 110
np_actualizarDimensiones : 99 100 101
np_addConstanteFLOAT : 92
np_addConstanteINT   : 91 100 101 101
np_addVariable       : 99 100 101
np_addVariableParametro : 
np_agregarFondo      : 15 28 29 30 32 33 34 51 54 58 58 59 71 72 79 79 97 98 98 106 110 114
np_agregarFondoParam : 64
np_asignarDimensionX : 100 101
np_asignarDimensionY : 101
np_asignarMemoria1   : 100
np_asignarMemoria2   : 101
np_contieneID        : 96 97 98 106
np_declfunc          : 20 21 22 23
np_declfuncprincipal : 7
np_defineTipo        : 11 12 13 28 29 30 32 33 34
np_end               : 7
np_endFunc           : 20 21 22 23
np_enviarACuadruplos : 96 97 98 99 100 101
np_enviarACuadruplosC : 91 92
np_esParametro       : 20 21 22 23
np_existeFuncion     : 64
np_forFalso          : 106
np_goSUB             : 64
np_gotoMain          : 3
np_iniciaElse        : 58
np_iniciaFor         : 106
np_iniciaIf          : 58 59
np_insertarOperador  : 18 19 79 80 81 83 84 85 86 88 94 94
np_llamadaFuncion    : 64
np_print             : 51 54
np_printCuadruplos   : 7
np_printStr          : 52 55
np_printTablas       : 7
np_quitarFondo       : 16 17 18 19 28 29 30 32 33 34 51 54 58 58 59 71 72 79 79 97 98 98 106 110 114
np_quitarFondoParam  : 64
np_read              : 75 77
np_resolverParam     : 71 72
np_return            : 114
np_returnVOID        : 115
np_terminaElse       : 58
np_terminaFor        : 106
np_terminaIf         : 59
np_updateMain        : 7
np_yaNoEsParametro   : 20 21 22 23
paramsLlamada1       : 64
paramsLlamada2       : 70 72
posibleID            : 75 77 79 90
posibleIDDeclaracion : 15 28 29 30 32 33 34
principal            : 6
programa             : 0
programa2            : 1 2
programa3            : 3 5
return               : 39
termino              : 82 83 83 84 84 85 85 86 86
termino1             : 88 89

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA ID SEMICOLON programa2

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . ID SEMICOLON programa2

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAMA ID . SEMICOLON programa2

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAMA ID SEMICOLON . programa2
    (2) programa2 -> . declaracion programa2
    (3) programa2 -> . np_gotoMain programa3
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (4) np_gotoMain -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 4 (np_gotoMain -> .)
    PRINCIPAL       reduce using rule 4 (np_gotoMain -> .)

    programa2                      shift and go to state 5
    declaracion                    shift and go to state 6
    np_gotoMain                    shift and go to state 7

state 5

    (1) programa -> PROGRAMA ID SEMICOLON programa2 .

    $end            reduce using rule 1 (programa -> PROGRAMA ID SEMICOLON programa2 .)


state 6

    (2) programa2 -> declaracion . programa2
    (2) programa2 -> . declaracion programa2
    (3) programa2 -> . np_gotoMain programa3
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (4) np_gotoMain -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 4 (np_gotoMain -> .)
    PRINCIPAL       reduce using rule 4 (np_gotoMain -> .)

    declaracion                    shift and go to state 6
    programa2                      shift and go to state 9
    np_gotoMain                    shift and go to state 7

state 7

    (3) programa2 -> np_gotoMain . programa3
    (5) programa3 -> . declaracionFuncion programa3
    (6) programa3 -> . principal
    (20) declaracionFuncion -> . FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (21) declaracionFuncion -> . FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (22) declaracionFuncion -> . FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (23) declaracionFuncion -> . FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (7) principal -> . PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    FUNCION         shift and go to state 13
    PRINCIPAL       shift and go to state 14

    programa3                      shift and go to state 10
    declaracionFuncion             shift and go to state 11
    principal                      shift and go to state 12

state 8

    (11) declaracion -> VAR . INT np_defineTipo COLON declaracion2
    (12) declaracion -> VAR . FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> VAR . CHAR np_defineTipo COLON declaracion2

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17


state 9

    (2) programa2 -> declaracion programa2 .

    $end            reduce using rule 2 (programa2 -> declaracion programa2 .)


state 10

    (3) programa2 -> np_gotoMain programa3 .

    $end            reduce using rule 3 (programa2 -> np_gotoMain programa3 .)


state 11

    (5) programa3 -> declaracionFuncion . programa3
    (5) programa3 -> . declaracionFuncion programa3
    (6) programa3 -> . principal
    (20) declaracionFuncion -> . FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (21) declaracionFuncion -> . FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (22) declaracionFuncion -> . FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (23) declaracionFuncion -> . FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (7) principal -> . PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    FUNCION         shift and go to state 13
    PRINCIPAL       shift and go to state 14

    declaracionFuncion             shift and go to state 11
    programa3                      shift and go to state 18
    principal                      shift and go to state 12

state 12

    (6) programa3 -> principal .

    $end            reduce using rule 6 (programa3 -> principal .)


state 13

    (20) declaracionFuncion -> FUNCION . VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (21) declaracionFuncion -> FUNCION . INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (22) declaracionFuncion -> FUNCION . FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (23) declaracionFuncion -> FUNCION . CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    VOID            shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22


state 14

    (7) principal -> PRINCIPAL . np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas
    (38) np_declfuncprincipal -> .

    OPAREN          reduce using rule 38 (np_declfuncprincipal -> .)

    np_declfuncprincipal           shift and go to state 23

state 15

    (11) declaracion -> VAR INT . np_defineTipo COLON declaracion2
    (14) np_defineTipo -> .

    COLON           reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 24

state 16

    (12) declaracion -> VAR FLOAT . np_defineTipo COLON declaracion2
    (14) np_defineTipo -> .

    COLON           reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 25

state 17

    (13) declaracion -> VAR CHAR . np_defineTipo COLON declaracion2
    (14) np_defineTipo -> .

    COLON           reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 26

state 18

    (5) programa3 -> declaracionFuncion programa3 .

    $end            reduce using rule 5 (programa3 -> declaracionFuncion programa3 .)


state 19

    (20) declaracionFuncion -> FUNCION VOID . ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 27


state 20

    (21) declaracionFuncion -> FUNCION INT . ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 28


state 21

    (22) declaracionFuncion -> FUNCION FLOAT . ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 29


state 22

    (23) declaracionFuncion -> FUNCION CHAR . ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    ID              shift and go to state 30


state 23

    (7) principal -> PRINCIPAL np_declfuncprincipal . np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas
    (8) np_updateMain -> .

    OPAREN          reduce using rule 8 (np_updateMain -> .)

    np_updateMain                  shift and go to state 31

state 24

    (11) declaracion -> VAR INT np_defineTipo . COLON declaracion2

    COLON           shift and go to state 32


state 25

    (12) declaracion -> VAR FLOAT np_defineTipo . COLON declaracion2

    COLON           shift and go to state 33


state 26

    (13) declaracion -> VAR CHAR np_defineTipo . COLON declaracion2

    COLON           shift and go to state 34


state 27

    (20) declaracionFuncion -> FUNCION VOID ID . np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 35

state 28

    (21) declaracionFuncion -> FUNCION INT ID . np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 36

state 29

    (22) declaracionFuncion -> FUNCION FLOAT ID . np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 37

state 30

    (23) declaracionFuncion -> FUNCION CHAR ID . np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (37) np_declfunc -> .

    OPAREN          reduce using rule 37 (np_declfunc -> .)

    np_declfunc                    shift and go to state 38

state 31

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain . OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    OPAREN          shift and go to state 39


state 32

    (11) declaracion -> VAR INT np_defineTipo COLON . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 40
    np_agregarFondo                shift and go to state 41

state 33

    (12) declaracion -> VAR FLOAT np_defineTipo COLON . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 42
    np_agregarFondo                shift and go to state 41

state 34

    (13) declaracion -> VAR CHAR np_defineTipo COLON . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 43
    np_agregarFondo                shift and go to state 41

state 35

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc . OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 44


state 36

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc . OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 45


state 37

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc . OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 46


state 38

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc . OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    OPAREN          shift and go to state 47


state 39

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN . CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    CPAREN          shift and go to state 48


state 40

    (11) declaracion -> VAR INT np_defineTipo COLON declaracion2 .

    VAR             reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    FUNCION         reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    PRINCIPAL       reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    REGRESA         reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    DESDE           reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    MIENTRAS        reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    LEE             reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    ESCRIBE         reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    SI              reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    ID              reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    CBRACKET        reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)
    OBRACKET        reduce using rule 11 (declaracion -> VAR INT np_defineTipo COLON declaracion2 .)


state 41

    (15) declaracion2 -> np_agregarFondo . posibleIDDeclaracion declaracion3
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 49

state 42

    (12) declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .

    VAR             reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    FUNCION         reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    PRINCIPAL       reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    REGRESA         reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    DESDE           reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    MIENTRAS        reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    LEE             reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    ESCRIBE         reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    SI              reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    ID              reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    CBRACKET        reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)
    OBRACKET        reduce using rule 12 (declaracion -> VAR FLOAT np_defineTipo COLON declaracion2 .)


state 43

    (13) declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .

    VAR             reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    FUNCION         reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    PRINCIPAL       reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    REGRESA         reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    DESDE           reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    MIENTRAS        reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    LEE             reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    ESCRIBE         reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    SI              reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    ID              reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    CBRACKET        reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)
    OBRACKET        reduce using rule 13 (declaracion -> VAR CHAR np_defineTipo COLON declaracion2 .)


state 44

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN . np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 51

state 45

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN . np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 52

state 46

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN . np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 53

state 47

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN . np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (24) np_esParametro -> .

    INT             reduce using rule 24 (np_esParametro -> .)
    CHAR            reduce using rule 24 (np_esParametro -> .)
    FLOAT           reduce using rule 24 (np_esParametro -> .)
    CPAREN          reduce using rule 24 (np_esParametro -> .)

    np_esParametro                 shift and go to state 54

state 48

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN . OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas

    OBRACKET        shift and go to state 55


state 49

    (15) declaracion2 -> np_agregarFondo posibleIDDeclaracion . declaracion3
    (16) declaracion3 -> . np_quitarFondo SEMICOLON
    (17) declaracion3 -> . np_quitarFondo COMA declaracion2
    (18) declaracion3 -> . ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON
    (19) declaracion3 -> . ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2
    (127) np_quitarFondo -> .

    ASSIGN          shift and go to state 58
    SEMICOLON       reduce using rule 127 (np_quitarFondo -> .)
    COMA            reduce using rule 127 (np_quitarFondo -> .)

    declaracion3                   shift and go to state 56
    np_quitarFondo                 shift and go to state 57

state 50

    (99) posibleIDDeclaracion -> ID . np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> ID . np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID . np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
    (122) np_addVariable -> .

    OCORCH          reduce using rule 122 (np_addVariable -> .)
    ASSIGN          reduce using rule 122 (np_addVariable -> .)
    SEMICOLON       reduce using rule 122 (np_addVariable -> .)
    COMA            reduce using rule 122 (np_addVariable -> .)
    CPAREN          reduce using rule 122 (np_addVariable -> .)

    np_addVariable                 shift and go to state 59

state 51

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro . declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    INT             shift and go to state 62
    CHAR            shift and go to state 63
    FLOAT           shift and go to state 64
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros   shift and go to state 60
    empty                          shift and go to state 61

state 52

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro . declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    INT             shift and go to state 62
    CHAR            shift and go to state 63
    FLOAT           shift and go to state 64
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros   shift and go to state 65
    empty                          shift and go to state 61

state 53

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro . declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    INT             shift and go to state 62
    CHAR            shift and go to state 63
    FLOAT           shift and go to state 64
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros   shift and go to state 66
    empty                          shift and go to state 61

state 54

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro . declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (27) declaracionFuncionParametros -> . empty
    (28) declaracionFuncionParametros -> . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (29) declaracionFuncionParametros -> . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (30) declaracionFuncionParametros -> . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    INT             shift and go to state 62
    CHAR            shift and go to state 63
    FLOAT           shift and go to state 64
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros   shift and go to state 67
    empty                          shift and go to state 61

state 55

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET . estatutos CBRACKET np_end np_printCuadruplos np_printTablas
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 68
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 56

    (15) declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .

    VAR             reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    FUNCION         reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    PRINCIPAL       reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    REGRESA         reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    DESDE           reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    MIENTRAS        reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    LEE             reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    ESCRIBE         reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    SI              reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    ID              reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    CBRACKET        reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)
    OBRACKET        reduce using rule 15 (declaracion2 -> np_agregarFondo posibleIDDeclaracion declaracion3 .)


state 57

    (16) declaracion3 -> np_quitarFondo . SEMICOLON
    (17) declaracion3 -> np_quitarFondo . COMA declaracion2

    SEMICOLON       shift and go to state 87
    COMA            shift and go to state 88


state 58

    (18) declaracion3 -> ASSIGN . np_insertarOperador expresion np_quitarFondo SEMICOLON
    (19) declaracion3 -> ASSIGN . np_insertarOperador expresion np_quitarFondo COMA declaracion2
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 89

state 59

    (99) posibleIDDeclaracion -> ID np_addVariable . np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> ID np_addVariable . np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable . np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
    (123) np_enviarACuadruplos -> .

    OCORCH          reduce using rule 123 (np_enviarACuadruplos -> .)
    ASSIGN          reduce using rule 123 (np_enviarACuadruplos -> .)
    SEMICOLON       reduce using rule 123 (np_enviarACuadruplos -> .)
    COMA            reduce using rule 123 (np_enviarACuadruplos -> .)
    CPAREN          reduce using rule 123 (np_enviarACuadruplos -> .)

    np_enviarACuadruplos           shift and go to state 90

state 60

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros . np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    CPAREN          reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 91

state 61

    (27) declaracionFuncionParametros -> empty .

    CPAREN          reduce using rule 27 (declaracionFuncionParametros -> empty .)


state 62

    (28) declaracionFuncionParametros -> INT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 92

state 63

    (29) declaracionFuncionParametros -> CHAR . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 93

state 64

    (30) declaracionFuncionParametros -> FLOAT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 94

state 65

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros . np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    CPAREN          reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 95

state 66

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros . CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 96


state 67

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros . CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 97


state 68

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos . CBRACKET np_end np_printCuadruplos np_printTablas

    CBRACKET        shift and go to state 98


state 69

    (39) estatutos -> return . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    return                         shift and go to state 69
    estatutos                      shift and go to state 99
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 70

    (40) estatutos -> empty .

    CBRACKET        reduce using rule 40 (estatutos -> empty .)


state 71

    (41) estatutos -> declaracion . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    declaracion                    shift and go to state 71
    estatutos                      shift and go to state 100
    return                         shift and go to state 69
    empty                          shift and go to state 70
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 72

    (42) estatutos -> estatutoRepeticionIncondicional . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutoRepeticionIncondicional shift and go to state 72
    estatutos                      shift and go to state 101
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 73

    (43) estatutos -> estatutoRepeticionCondicional . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutoRepeticionCondicional  shift and go to state 73
    estatutos                      shift and go to state 102
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 74

    (44) estatutos -> lectura . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    lectura                        shift and go to state 74
    estatutos                      shift and go to state 103
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 75

    (45) estatutos -> asignacion . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    asignacion                     shift and go to state 75
    estatutos                      shift and go to state 104
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 76

    (46) estatutos -> escritura . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    escritura                      shift and go to state 76
    estatutos                      shift and go to state 105
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 77

    (47) estatutos -> decision . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    decision                       shift and go to state 77
    estatutos                      shift and go to state 106
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 78

    (48) estatutos -> llamadaFuncion . SEMICOLON estatutos

    SEMICOLON       shift and go to state 107


state 79

    (114) return -> REGRESA . np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> REGRESA . SEMICOLON np_returnVOID
    (126) np_agregarFondo -> .

    SEMICOLON       shift and go to state 109
    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 108

state 80

    (106) estatutoRepeticionIncondicional -> DESDE . ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor

    ID              shift and go to state 110


state 81

    (64) llamadaFuncion -> ID . np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> ID . np_contieneID np_enviarACuadruplos
    (97) posibleID -> ID . np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> ID . np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (65) np_existeFuncion -> .
    (118) np_contieneID -> .

    OPAREN          reduce using rule 65 (np_existeFuncion -> .)
    OCORCH          reduce using rule 118 (np_contieneID -> .)
    ASSIGN          reduce using rule 118 (np_contieneID -> .)

    np_existeFuncion               shift and go to state 111
    np_contieneID                  shift and go to state 112

state 82

    (110) estatutoRepeticionCondicional -> MIENTRAS . OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    OPAREN          shift and go to state 113


state 83

    (75) lectura -> LEE . OPAREN posibleID np_read lectura2 CPAREN SEMICOLON

    OPAREN          shift and go to state 114


state 84

    (79) asignacion -> posibleID . np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (126) np_agregarFondo -> .

    ASSIGN          reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 115

state 85

    (49) escritura -> ESCRIBE . OPAREN escritura2 CPAREN SEMICOLON

    OPAREN          shift and go to state 116


state 86

    (58) decision -> SI . OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI . OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf

    OPAREN          shift and go to state 117


state 87

    (16) declaracion3 -> np_quitarFondo SEMICOLON .

    VAR             reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    FUNCION         reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    PRINCIPAL       reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    REGRESA         reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    DESDE           reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    MIENTRAS        reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    LEE             reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    ESCRIBE         reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    SI              reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    ID              reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    CBRACKET        reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)
    OBRACKET        reduce using rule 16 (declaracion3 -> np_quitarFondo SEMICOLON .)


state 88

    (17) declaracion3 -> np_quitarFondo COMA . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 118
    np_agregarFondo                shift and go to state 41

state 89

    (18) declaracion3 -> ASSIGN np_insertarOperador . expresion np_quitarFondo SEMICOLON
    (19) declaracion3 -> ASSIGN np_insertarOperador . expresion np_quitarFondo COMA declaracion2
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 119
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 90

    (99) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos . np_actualizarDimensiones
    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos . np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos . np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
    (125) np_actualizarDimensiones -> .

    OCORCH          reduce using rule 125 (np_actualizarDimensiones -> .)
    ASSIGN          reduce using rule 125 (np_actualizarDimensiones -> .)
    SEMICOLON       reduce using rule 125 (np_actualizarDimensiones -> .)
    COMA            reduce using rule 125 (np_actualizarDimensiones -> .)
    CPAREN          reduce using rule 125 (np_actualizarDimensiones -> .)

    np_actualizarDimensiones       shift and go to state 129

state 91

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro . CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 130


state 92

    (28) declaracionFuncionParametros -> INT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 131

state 93

    (29) declaracionFuncionParametros -> CHAR np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 132

state 94

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 133

state 95

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro . CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc

    CPAREN          shift and go to state 134


state 96

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN . np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    VAR             reduce using rule 25 (np_yaNoEsParametro -> .)
    OBRACKET        reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 135

state 97

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN . np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (25) np_yaNoEsParametro -> .

    VAR             reduce using rule 25 (np_yaNoEsParametro -> .)
    OBRACKET        reduce using rule 25 (np_yaNoEsParametro -> .)

    np_yaNoEsParametro             shift and go to state 136

state 98

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET . np_end np_printCuadruplos np_printTablas
    (9) np_end -> .

    $end            reduce using rule 9 (np_end -> .)

    np_end                         shift and go to state 137

state 99

    (39) estatutos -> return estatutos .

    CBRACKET        reduce using rule 39 (estatutos -> return estatutos .)


state 100

    (41) estatutos -> declaracion estatutos .

    CBRACKET        reduce using rule 41 (estatutos -> declaracion estatutos .)


state 101

    (42) estatutos -> estatutoRepeticionIncondicional estatutos .

    CBRACKET        reduce using rule 42 (estatutos -> estatutoRepeticionIncondicional estatutos .)


state 102

    (43) estatutos -> estatutoRepeticionCondicional estatutos .

    CBRACKET        reduce using rule 43 (estatutos -> estatutoRepeticionCondicional estatutos .)


state 103

    (44) estatutos -> lectura estatutos .

    CBRACKET        reduce using rule 44 (estatutos -> lectura estatutos .)


state 104

    (45) estatutos -> asignacion estatutos .

    CBRACKET        reduce using rule 45 (estatutos -> asignacion estatutos .)


state 105

    (46) estatutos -> escritura estatutos .

    CBRACKET        reduce using rule 46 (estatutos -> escritura estatutos .)


state 106

    (47) estatutos -> decision estatutos .

    CBRACKET        reduce using rule 47 (estatutos -> decision estatutos .)


state 107

    (48) estatutos -> llamadaFuncion SEMICOLON . estatutos
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    llamadaFuncion                 shift and go to state 78
    estatutos                      shift and go to state 138
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    posibleID                      shift and go to state 84

state 108

    (114) return -> REGRESA np_agregarFondo . expresion np_quitarFondo SEMICOLON np_return
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 139
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 109

    (115) return -> REGRESA SEMICOLON . np_returnVOID
    (117) np_returnVOID -> .

    REGRESA         reduce using rule 117 (np_returnVOID -> .)
    VAR             reduce using rule 117 (np_returnVOID -> .)
    DESDE           reduce using rule 117 (np_returnVOID -> .)
    MIENTRAS        reduce using rule 117 (np_returnVOID -> .)
    LEE             reduce using rule 117 (np_returnVOID -> .)
    ESCRIBE         reduce using rule 117 (np_returnVOID -> .)
    SI              reduce using rule 117 (np_returnVOID -> .)
    ID              reduce using rule 117 (np_returnVOID -> .)
    CBRACKET        reduce using rule 117 (np_returnVOID -> .)

    np_returnVOID                  shift and go to state 140

state 110

    (106) estatutoRepeticionIncondicional -> DESDE ID . np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (118) np_contieneID -> .

    HASTA           reduce using rule 118 (np_contieneID -> .)

    np_contieneID                  shift and go to state 141

state 111

    (64) llamadaFuncion -> ID np_existeFuncion . np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (66) np_llamadaFuncion -> .

    OPAREN          reduce using rule 66 (np_llamadaFuncion -> .)

    np_llamadaFuncion              shift and go to state 142

state 112

    (96) posibleID -> ID np_contieneID . np_enviarACuadruplos
    (97) posibleID -> ID np_contieneID . np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> ID np_contieneID . np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (123) np_enviarACuadruplos -> .

    OCORCH          reduce using rule 123 (np_enviarACuadruplos -> .)
    ASSIGN          reduce using rule 123 (np_enviarACuadruplos -> .)
    OPMATRIZ        reduce using rule 123 (np_enviarACuadruplos -> .)
    PLUS            reduce using rule 123 (np_enviarACuadruplos -> .)
    MINUS           reduce using rule 123 (np_enviarACuadruplos -> .)
    MULTIPLY        reduce using rule 123 (np_enviarACuadruplos -> .)
    DIVIDE          reduce using rule 123 (np_enviarACuadruplos -> .)
    LOGIC           reduce using rule 123 (np_enviarACuadruplos -> .)
    RELOP           reduce using rule 123 (np_enviarACuadruplos -> .)
    SEMICOLON       reduce using rule 123 (np_enviarACuadruplos -> .)
    COMA            reduce using rule 123 (np_enviarACuadruplos -> .)
    CPAREN          reduce using rule 123 (np_enviarACuadruplos -> .)
    CCORCH          reduce using rule 123 (np_enviarACuadruplos -> .)
    HAZ             reduce using rule 123 (np_enviarACuadruplos -> .)

    np_enviarACuadruplos           shift and go to state 143

state 113

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN . np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 144

state 114

    (75) lectura -> LEE OPAREN . posibleID np_read lectura2 CPAREN SEMICOLON
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    ID              shift and go to state 146

    posibleID                      shift and go to state 145

state 115

    (79) asignacion -> posibleID np_agregarFondo . ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON

    ASSIGN          shift and go to state 147


state 116

    (49) escritura -> ESCRIBE OPAREN . escritura2 CPAREN SEMICOLON
    (50) escritura2 -> . empty
    (51) escritura2 -> . np_agregarFondo expresion np_quitarFondo np_print escritura3
    (52) escritura2 -> . STRING np_printStr escritura3
    (129) empty -> .
    (126) np_agregarFondo -> .

    STRING          shift and go to state 151
    CPAREN          reduce using rule 129 (empty -> .)
    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    escritura2                     shift and go to state 148
    empty                          shift and go to state 149
    np_agregarFondo                shift and go to state 150

state 117

    (58) decision -> SI OPAREN . np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN . np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 152

state 118

    (17) declaracion3 -> np_quitarFondo COMA declaracion2 .

    VAR             reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    FUNCION         reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    PRINCIPAL       reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    REGRESA         reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    DESDE           reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    MIENTRAS        reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    LEE             reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    ESCRIBE         reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    SI              reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    ID              reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    CBRACKET        reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)
    OBRACKET        reduce using rule 17 (declaracion3 -> np_quitarFondo COMA declaracion2 .)


state 119

    (18) declaracion3 -> ASSIGN np_insertarOperador expresion . np_quitarFondo SEMICOLON
    (19) declaracion3 -> ASSIGN np_insertarOperador expresion . np_quitarFondo COMA declaracion2
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    SEMICOLON       reduce using rule 127 (np_quitarFondo -> .)
    COMA            reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 153

state 120

    (82) expresion -> termino .
    (83) termino -> termino . PLUS np_insertarOperador termino
    (84) termino -> termino . MINUS np_insertarOperador termino
    (85) termino -> termino . MULTIPLY np_insertarOperador termino
    (86) termino -> termino . DIVIDE np_insertarOperador termino

    LOGIC           reduce using rule 82 (expresion -> termino .)
    RELOP           reduce using rule 82 (expresion -> termino .)
    SEMICOLON       reduce using rule 82 (expresion -> termino .)
    COMA            reduce using rule 82 (expresion -> termino .)
    CPAREN          reduce using rule 82 (expresion -> termino .)
    CCORCH          reduce using rule 82 (expresion -> termino .)
    HAZ             reduce using rule 82 (expresion -> termino .)
    PLUS            shift and go to state 156
    MINUS           shift and go to state 157
    MULTIPLY        shift and go to state 158
    DIVIDE          shift and go to state 159


state 121

    (88) termino -> termino1 . OPMATRIZ np_insertarOperador
    (89) termino -> termino1 .

    OPMATRIZ        shift and go to state 160
    PLUS            reduce using rule 89 (termino -> termino1 .)
    MINUS           reduce using rule 89 (termino -> termino1 .)
    MULTIPLY        reduce using rule 89 (termino -> termino1 .)
    DIVIDE          reduce using rule 89 (termino -> termino1 .)
    LOGIC           reduce using rule 89 (termino -> termino1 .)
    RELOP           reduce using rule 89 (termino -> termino1 .)
    SEMICOLON       reduce using rule 89 (termino -> termino1 .)
    COMA            reduce using rule 89 (termino -> termino1 .)
    CPAREN          reduce using rule 89 (termino -> termino1 .)
    CCORCH          reduce using rule 89 (termino -> termino1 .)
    HAZ             reduce using rule 89 (termino -> termino1 .)


state 122

    (90) termino1 -> posibleID .

    OPMATRIZ        reduce using rule 90 (termino1 -> posibleID .)
    PLUS            reduce using rule 90 (termino1 -> posibleID .)
    MINUS           reduce using rule 90 (termino1 -> posibleID .)
    MULTIPLY        reduce using rule 90 (termino1 -> posibleID .)
    DIVIDE          reduce using rule 90 (termino1 -> posibleID .)
    LOGIC           reduce using rule 90 (termino1 -> posibleID .)
    RELOP           reduce using rule 90 (termino1 -> posibleID .)
    SEMICOLON       reduce using rule 90 (termino1 -> posibleID .)
    COMA            reduce using rule 90 (termino1 -> posibleID .)
    CPAREN          reduce using rule 90 (termino1 -> posibleID .)
    CCORCH          reduce using rule 90 (termino1 -> posibleID .)
    HAZ             reduce using rule 90 (termino1 -> posibleID .)


state 123

    (91) termino1 -> ENTERO . np_addConstanteINT np_enviarACuadruplosC
    (119) np_addConstanteINT -> .

    OPMATRIZ        reduce using rule 119 (np_addConstanteINT -> .)
    PLUS            reduce using rule 119 (np_addConstanteINT -> .)
    MINUS           reduce using rule 119 (np_addConstanteINT -> .)
    MULTIPLY        reduce using rule 119 (np_addConstanteINT -> .)
    DIVIDE          reduce using rule 119 (np_addConstanteINT -> .)
    LOGIC           reduce using rule 119 (np_addConstanteINT -> .)
    RELOP           reduce using rule 119 (np_addConstanteINT -> .)
    SEMICOLON       reduce using rule 119 (np_addConstanteINT -> .)
    COMA            reduce using rule 119 (np_addConstanteINT -> .)
    CPAREN          reduce using rule 119 (np_addConstanteINT -> .)
    CCORCH          reduce using rule 119 (np_addConstanteINT -> .)
    HAZ             reduce using rule 119 (np_addConstanteINT -> .)

    np_addConstanteINT             shift and go to state 161

state 124

    (92) termino1 -> FLOTANTE . np_addConstanteFLOAT np_enviarACuadruplosC
    (120) np_addConstanteFLOAT -> .

    OPMATRIZ        reduce using rule 120 (np_addConstanteFLOAT -> .)
    PLUS            reduce using rule 120 (np_addConstanteFLOAT -> .)
    MINUS           reduce using rule 120 (np_addConstanteFLOAT -> .)
    MULTIPLY        reduce using rule 120 (np_addConstanteFLOAT -> .)
    DIVIDE          reduce using rule 120 (np_addConstanteFLOAT -> .)
    LOGIC           reduce using rule 120 (np_addConstanteFLOAT -> .)
    RELOP           reduce using rule 120 (np_addConstanteFLOAT -> .)
    SEMICOLON       reduce using rule 120 (np_addConstanteFLOAT -> .)
    COMA            reduce using rule 120 (np_addConstanteFLOAT -> .)
    CPAREN          reduce using rule 120 (np_addConstanteFLOAT -> .)
    CCORCH          reduce using rule 120 (np_addConstanteFLOAT -> .)
    HAZ             reduce using rule 120 (np_addConstanteFLOAT -> .)

    np_addConstanteFLOAT           shift and go to state 162

state 125

    (93) termino1 -> llamadaFuncion .

    OPMATRIZ        reduce using rule 93 (termino1 -> llamadaFuncion .)
    PLUS            reduce using rule 93 (termino1 -> llamadaFuncion .)
    MINUS           reduce using rule 93 (termino1 -> llamadaFuncion .)
    MULTIPLY        reduce using rule 93 (termino1 -> llamadaFuncion .)
    DIVIDE          reduce using rule 93 (termino1 -> llamadaFuncion .)
    LOGIC           reduce using rule 93 (termino1 -> llamadaFuncion .)
    RELOP           reduce using rule 93 (termino1 -> llamadaFuncion .)
    SEMICOLON       reduce using rule 93 (termino1 -> llamadaFuncion .)
    COMA            reduce using rule 93 (termino1 -> llamadaFuncion .)
    CPAREN          reduce using rule 93 (termino1 -> llamadaFuncion .)
    CCORCH          reduce using rule 93 (termino1 -> llamadaFuncion .)
    HAZ             reduce using rule 93 (termino1 -> llamadaFuncion .)


state 126

    (94) termino1 -> OPAREN . np_insertarOperador expresion CPAREN np_insertarOperador
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 163

state 127

    (95) termino1 -> QUOT . CARACTER QUOT

    CARACTER        shift and go to state 164


state 128

    (96) posibleID -> ID . np_contieneID np_enviarACuadruplos
    (97) posibleID -> ID . np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> ID . np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> ID . np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (118) np_contieneID -> .
    (65) np_existeFuncion -> .

    OCORCH          reduce using rule 118 (np_contieneID -> .)
    OPMATRIZ        reduce using rule 118 (np_contieneID -> .)
    PLUS            reduce using rule 118 (np_contieneID -> .)
    MINUS           reduce using rule 118 (np_contieneID -> .)
    MULTIPLY        reduce using rule 118 (np_contieneID -> .)
    DIVIDE          reduce using rule 118 (np_contieneID -> .)
    LOGIC           reduce using rule 118 (np_contieneID -> .)
    RELOP           reduce using rule 118 (np_contieneID -> .)
    SEMICOLON       reduce using rule 118 (np_contieneID -> .)
    COMA            reduce using rule 118 (np_contieneID -> .)
    CPAREN          reduce using rule 118 (np_contieneID -> .)
    CCORCH          reduce using rule 118 (np_contieneID -> .)
    HAZ             reduce using rule 118 (np_contieneID -> .)
    OPAREN          reduce using rule 65 (np_existeFuncion -> .)

    np_contieneID                  shift and go to state 112
    np_existeFuncion               shift and go to state 111

state 129

    (99) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .
    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones . OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones . OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ASSIGN          reduce using rule 99 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    SEMICOLON       reduce using rule 99 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    COMA            reduce using rule 99 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    CPAREN          reduce using rule 99 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones .)
    OCORCH          shift and go to state 165


state 130

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 166
    empty                          shift and go to state 167
    declaracion                    shift and go to state 168

state 131

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 169

state 132

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 170

state 133

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 171

state 134

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 172
    empty                          shift and go to state 167
    declaracion                    shift and go to state 168

state 135

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 173
    empty                          shift and go to state 167
    declaracion                    shift and go to state 168

state 136

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro . declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc
    (35) declaracionFuncionVariables -> . empty
    (36) declaracionFuncionVariables -> . declaracion
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2

    OBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8

    declaracionFuncionVariables    shift and go to state 174
    empty                          shift and go to state 167
    declaracion                    shift and go to state 168

state 137

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end . np_printCuadruplos np_printTablas
    (128) np_printCuadruplos -> .

    $end            reduce using rule 128 (np_printCuadruplos -> .)

    np_printCuadruplos             shift and go to state 175

state 138

    (48) estatutos -> llamadaFuncion SEMICOLON estatutos .

    CBRACKET        reduce using rule 48 (estatutos -> llamadaFuncion SEMICOLON estatutos .)


state 139

    (114) return -> REGRESA np_agregarFondo expresion . np_quitarFondo SEMICOLON np_return
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    SEMICOLON       reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 176

state 140

    (115) return -> REGRESA SEMICOLON np_returnVOID .

    REGRESA         reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    VAR             reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    DESDE           reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    MIENTRAS        reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    LEE             reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    ESCRIBE         reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    SI              reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    ID              reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)
    CBRACKET        reduce using rule 115 (return -> REGRESA SEMICOLON np_returnVOID .)


state 141

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID . HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor

    HASTA           shift and go to state 177


state 142

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion . np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (67) np_agregarFondoParam -> .

    OPAREN          reduce using rule 67 (np_agregarFondoParam -> .)

    np_agregarFondoParam           shift and go to state 178

state 143

    (96) posibleID -> ID np_contieneID np_enviarACuadruplos .
    (97) posibleID -> ID np_contieneID np_enviarACuadruplos . OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> ID np_contieneID np_enviarACuadruplos . OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    ASSIGN          reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    OPMATRIZ        reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    PLUS            reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    MINUS           reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    MULTIPLY        reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    DIVIDE          reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    LOGIC           reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    RELOP           reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    SEMICOLON       reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    COMA            reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    CPAREN          reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    CCORCH          reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    HAZ             reduce using rule 96 (posibleID -> ID np_contieneID np_enviarACuadruplos .)
    OCORCH          shift and go to state 179


state 144

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo . npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (111) npWhileStExp -> .

    ENTERO          reduce using rule 111 (npWhileStExp -> .)
    FLOTANTE        reduce using rule 111 (npWhileStExp -> .)
    OPAREN          reduce using rule 111 (npWhileStExp -> .)
    QUOT            reduce using rule 111 (npWhileStExp -> .)
    ID              reduce using rule 111 (npWhileStExp -> .)

    npWhileStExp                   shift and go to state 180

state 145

    (75) lectura -> LEE OPAREN posibleID . np_read lectura2 CPAREN SEMICOLON
    (78) np_read -> .

    COMA            reduce using rule 78 (np_read -> .)
    CPAREN          reduce using rule 78 (np_read -> .)

    np_read                        shift and go to state 181

state 146

    (96) posibleID -> ID . np_contieneID np_enviarACuadruplos
    (97) posibleID -> ID . np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> ID . np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (118) np_contieneID -> .

    OCORCH          reduce using rule 118 (np_contieneID -> .)
    COMA            reduce using rule 118 (np_contieneID -> .)
    CPAREN          reduce using rule 118 (np_contieneID -> .)

    np_contieneID                  shift and go to state 112

state 147

    (79) asignacion -> posibleID np_agregarFondo ASSIGN . np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 182

state 148

    (49) escritura -> ESCRIBE OPAREN escritura2 . CPAREN SEMICOLON

    CPAREN          shift and go to state 183


state 149

    (50) escritura2 -> empty .

    CPAREN          reduce using rule 50 (escritura2 -> empty .)


state 150

    (51) escritura2 -> np_agregarFondo . expresion np_quitarFondo np_print escritura3
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 184
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 151

    (52) escritura2 -> STRING . np_printStr escritura3
    (57) np_printStr -> .

    COMA            reduce using rule 57 (np_printStr -> .)
    CPAREN          reduce using rule 57 (np_printStr -> .)

    np_printStr                    shift and go to state 185

state 152

    (58) decision -> SI OPAREN np_agregarFondo . expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo . expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 186
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 153

    (18) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo . SEMICOLON
    (19) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo . COMA declaracion2

    SEMICOLON       shift and go to state 187
    COMA            shift and go to state 188


state 154

    (80) expresion -> expresion LOGIC . np_insertarOperador expresion
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 189

state 155

    (81) expresion -> expresion RELOP . np_insertarOperador expresion
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 190

state 156

    (83) termino -> termino PLUS . np_insertarOperador termino
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 191

state 157

    (84) termino -> termino MINUS . np_insertarOperador termino
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 192

state 158

    (85) termino -> termino MULTIPLY . np_insertarOperador termino
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 193

state 159

    (86) termino -> termino DIVIDE . np_insertarOperador termino
    (87) np_insertarOperador -> .

    ENTERO          reduce using rule 87 (np_insertarOperador -> .)
    FLOTANTE        reduce using rule 87 (np_insertarOperador -> .)
    OPAREN          reduce using rule 87 (np_insertarOperador -> .)
    QUOT            reduce using rule 87 (np_insertarOperador -> .)
    ID              reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 194

state 160

    (88) termino -> termino1 OPMATRIZ . np_insertarOperador
    (87) np_insertarOperador -> .

    PLUS            reduce using rule 87 (np_insertarOperador -> .)
    MINUS           reduce using rule 87 (np_insertarOperador -> .)
    MULTIPLY        reduce using rule 87 (np_insertarOperador -> .)
    DIVIDE          reduce using rule 87 (np_insertarOperador -> .)
    LOGIC           reduce using rule 87 (np_insertarOperador -> .)
    RELOP           reduce using rule 87 (np_insertarOperador -> .)
    SEMICOLON       reduce using rule 87 (np_insertarOperador -> .)
    COMA            reduce using rule 87 (np_insertarOperador -> .)
    CPAREN          reduce using rule 87 (np_insertarOperador -> .)
    CCORCH          reduce using rule 87 (np_insertarOperador -> .)
    HAZ             reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 195

state 161

    (91) termino1 -> ENTERO np_addConstanteINT . np_enviarACuadruplosC
    (124) np_enviarACuadruplosC -> .

    OPMATRIZ        reduce using rule 124 (np_enviarACuadruplosC -> .)
    PLUS            reduce using rule 124 (np_enviarACuadruplosC -> .)
    MINUS           reduce using rule 124 (np_enviarACuadruplosC -> .)
    MULTIPLY        reduce using rule 124 (np_enviarACuadruplosC -> .)
    DIVIDE          reduce using rule 124 (np_enviarACuadruplosC -> .)
    LOGIC           reduce using rule 124 (np_enviarACuadruplosC -> .)
    RELOP           reduce using rule 124 (np_enviarACuadruplosC -> .)
    SEMICOLON       reduce using rule 124 (np_enviarACuadruplosC -> .)
    COMA            reduce using rule 124 (np_enviarACuadruplosC -> .)
    CPAREN          reduce using rule 124 (np_enviarACuadruplosC -> .)
    CCORCH          reduce using rule 124 (np_enviarACuadruplosC -> .)
    HAZ             reduce using rule 124 (np_enviarACuadruplosC -> .)

    np_enviarACuadruplosC          shift and go to state 196

state 162

    (92) termino1 -> FLOTANTE np_addConstanteFLOAT . np_enviarACuadruplosC
    (124) np_enviarACuadruplosC -> .

    OPMATRIZ        reduce using rule 124 (np_enviarACuadruplosC -> .)
    PLUS            reduce using rule 124 (np_enviarACuadruplosC -> .)
    MINUS           reduce using rule 124 (np_enviarACuadruplosC -> .)
    MULTIPLY        reduce using rule 124 (np_enviarACuadruplosC -> .)
    DIVIDE          reduce using rule 124 (np_enviarACuadruplosC -> .)
    LOGIC           reduce using rule 124 (np_enviarACuadruplosC -> .)
    RELOP           reduce using rule 124 (np_enviarACuadruplosC -> .)
    SEMICOLON       reduce using rule 124 (np_enviarACuadruplosC -> .)
    COMA            reduce using rule 124 (np_enviarACuadruplosC -> .)
    CPAREN          reduce using rule 124 (np_enviarACuadruplosC -> .)
    CCORCH          reduce using rule 124 (np_enviarACuadruplosC -> .)
    HAZ             reduce using rule 124 (np_enviarACuadruplosC -> .)

    np_enviarACuadruplosC          shift and go to state 197

state 163

    (94) termino1 -> OPAREN np_insertarOperador . expresion CPAREN np_insertarOperador
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 198
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 164

    (95) termino1 -> QUOT CARACTER . QUOT

    QUOT            shift and go to state 199


state 165

    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH . ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH . ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ENTERO          shift and go to state 200


state 166

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 201


state 167

    (35) declaracionFuncionVariables -> empty .

    OBRACKET        reduce using rule 35 (declaracionFuncionVariables -> empty .)


state 168

    (36) declaracionFuncionVariables -> declaracion .

    OBRACKET        reduce using rule 36 (declaracionFuncionVariables -> declaracion .)


state 169

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (127) np_quitarFondo -> .

    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 202

state 170

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (127) np_quitarFondo -> .

    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 203

state 171

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (127) np_quitarFondo -> .

    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 204

state 172

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 205


state 173

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 206


state 174

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables . OBRACKET estatutos CBRACKET np_endFunc

    OBRACKET        shift and go to state 207


state 175

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos . np_printTablas
    (10) np_printTablas -> .

    $end            reduce using rule 10 (np_printTablas -> .)

    np_printTablas                 shift and go to state 208

state 176

    (114) return -> REGRESA np_agregarFondo expresion np_quitarFondo . SEMICOLON np_return

    SEMICOLON       shift and go to state 209


state 177

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA . np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (107) np_iniciaFor -> .

    ENTERO          reduce using rule 107 (np_iniciaFor -> .)
    FLOTANTE        reduce using rule 107 (np_iniciaFor -> .)
    OPAREN          reduce using rule 107 (np_iniciaFor -> .)
    QUOT            reduce using rule 107 (np_iniciaFor -> .)
    ID              reduce using rule 107 (np_iniciaFor -> .)

    np_iniciaFor                   shift and go to state 210

state 178

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam . OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    OPAREN          shift and go to state 211


state 179

    (97) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH . np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH . np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 212

state 180

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp . expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 213
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 181

    (75) lectura -> LEE OPAREN posibleID np_read . lectura2 CPAREN SEMICOLON
    (76) lectura2 -> . empty
    (77) lectura2 -> . COMA posibleID np_read lectura2
    (129) empty -> .

    COMA            shift and go to state 216
    CPAREN          reduce using rule 129 (empty -> .)

    lectura2                       shift and go to state 214
    empty                          shift and go to state 215

state 182

    (79) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador . np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 217

state 183

    (49) escritura -> ESCRIBE OPAREN escritura2 CPAREN . SEMICOLON

    SEMICOLON       shift and go to state 218


state 184

    (51) escritura2 -> np_agregarFondo expresion . np_quitarFondo np_print escritura3
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 219

state 185

    (52) escritura2 -> STRING np_printStr . escritura3
    (53) escritura3 -> . empty
    (54) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (55) escritura3 -> . COMA STRING np_printStr escritura3
    (129) empty -> .

    COMA            shift and go to state 222
    CPAREN          reduce using rule 129 (empty -> .)

    escritura3                     shift and go to state 220
    empty                          shift and go to state 221

state 186

    (58) decision -> SI OPAREN np_agregarFondo expresion . np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion . np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 223

state 187

    (18) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .

    VAR             reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    FUNCION         reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    PRINCIPAL       reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    REGRESA         reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    DESDE           reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    MIENTRAS        reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    LEE             reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    ESCRIBE         reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    SI              reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    ID              reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    CBRACKET        reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)
    OBRACKET        reduce using rule 18 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo SEMICOLON .)


state 188

    (19) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA . declaracion2
    (15) declaracion2 -> . np_agregarFondo posibleIDDeclaracion declaracion3
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    declaracion2                   shift and go to state 224
    np_agregarFondo                shift and go to state 41

state 189

    (80) expresion -> expresion LOGIC np_insertarOperador . expresion
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 225
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 190

    (81) expresion -> expresion RELOP np_insertarOperador . expresion
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 226
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 191

    (83) termino -> termino PLUS np_insertarOperador . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    termino                        shift and go to state 227
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 192

    (84) termino -> termino MINUS np_insertarOperador . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    termino                        shift and go to state 228
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 193

    (85) termino -> termino MULTIPLY np_insertarOperador . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    termino                        shift and go to state 229
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 194

    (86) termino -> termino DIVIDE np_insertarOperador . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    termino                        shift and go to state 230
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 195

    (88) termino -> termino1 OPMATRIZ np_insertarOperador .

    PLUS            reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    MINUS           reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    MULTIPLY        reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    DIVIDE          reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    LOGIC           reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    RELOP           reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    SEMICOLON       reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    COMA            reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    CPAREN          reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    CCORCH          reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)
    HAZ             reduce using rule 88 (termino -> termino1 OPMATRIZ np_insertarOperador .)


state 196

    (91) termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .

    OPMATRIZ        reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    PLUS            reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    MINUS           reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    MULTIPLY        reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    DIVIDE          reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    LOGIC           reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    RELOP           reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    SEMICOLON       reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    COMA            reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    CPAREN          reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    CCORCH          reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)
    HAZ             reduce using rule 91 (termino1 -> ENTERO np_addConstanteINT np_enviarACuadruplosC .)


state 197

    (92) termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .

    OPMATRIZ        reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    PLUS            reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    MINUS           reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    MULTIPLY        reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    DIVIDE          reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    LOGIC           reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    RELOP           reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    SEMICOLON       reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    COMA            reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    CPAREN          reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    CCORCH          reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)
    HAZ             reduce using rule 92 (termino1 -> FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC .)


state 198

    (94) termino1 -> OPAREN np_insertarOperador expresion . CPAREN np_insertarOperador
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion

    CPAREN          shift and go to state 231
    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155


state 199

    (95) termino1 -> QUOT CARACTER QUOT .

    OPMATRIZ        reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    PLUS            reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    MINUS           reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    MULTIPLY        reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    DIVIDE          reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    LOGIC           reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    RELOP           reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    SEMICOLON       reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    COMA            reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    CPAREN          reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    CCORCH          reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)
    HAZ             reduce using rule 95 (termino1 -> QUOT CARACTER QUOT .)


state 200

    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO . np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO . np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
    (119) np_addConstanteINT -> .

    CCORCH          reduce using rule 119 (np_addConstanteINT -> .)
    COMA            reduce using rule 119 (np_addConstanteINT -> .)

    np_addConstanteINT             shift and go to state 232

state 201

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 233
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 202

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    COMA            shift and go to state 236
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 234
    empty                          shift and go to state 235

state 203

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    COMA            shift and go to state 236
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 237
    empty                          shift and go to state 235

state 204

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    COMA            shift and go to state 236
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 238
    empty                          shift and go to state 235

state 205

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 239
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 206

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 240
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 207

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET . estatutos CBRACKET np_endFunc
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 241
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 208

    (7) principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas .

    $end            reduce using rule 7 (principal -> PRINCIPAL np_declfuncprincipal np_updateMain OPAREN CPAREN OBRACKET estatutos CBRACKET np_end np_printCuadruplos np_printTablas .)


state 209

    (114) return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON . np_return
    (116) np_return -> .

    REGRESA         reduce using rule 116 (np_return -> .)
    VAR             reduce using rule 116 (np_return -> .)
    DESDE           reduce using rule 116 (np_return -> .)
    MIENTRAS        reduce using rule 116 (np_return -> .)
    LEE             reduce using rule 116 (np_return -> .)
    ESCRIBE         reduce using rule 116 (np_return -> .)
    SI              reduce using rule 116 (np_return -> .)
    ID              reduce using rule 116 (np_return -> .)
    CBRACKET        reduce using rule 116 (np_return -> .)

    np_return                      shift and go to state 242

state 210

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor . np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 243

state 211

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN . paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (69) paramsLlamada1 -> . empty
    (70) paramsLlamada1 -> . paramsLlamada2
    (129) empty -> .
    (71) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam
    (72) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
    (126) np_agregarFondo -> .

    CPAREN          reduce using rule 129 (empty -> .)
    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    paramsLlamada1                 shift and go to state 244
    empty                          shift and go to state 245
    paramsLlamada2                 shift and go to state 246
    np_agregarFondo                shift and go to state 247

state 212

    (97) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo . expresion np_quitarFondo CCORCH
    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo . expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 248
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 213

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion . np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 249

state 214

    (75) lectura -> LEE OPAREN posibleID np_read lectura2 . CPAREN SEMICOLON

    CPAREN          shift and go to state 250


state 215

    (76) lectura2 -> empty .

    CPAREN          reduce using rule 76 (lectura2 -> empty .)


state 216

    (77) lectura2 -> COMA . posibleID np_read lectura2
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    ID              shift and go to state 146

    posibleID                      shift and go to state 251

state 217

    (79) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo . expresion np_quitarFondo np_quitarFondo SEMICOLON
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    posibleID                      shift and go to state 122
    expresion                      shift and go to state 252
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    llamadaFuncion                 shift and go to state 125

state 218

    (49) escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .

    REGRESA         reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    VAR             reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    DESDE           reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    LEE             reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    SI              reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    ID              reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)
    CBRACKET        reduce using rule 49 (escritura -> ESCRIBE OPAREN escritura2 CPAREN SEMICOLON .)


state 219

    (51) escritura2 -> np_agregarFondo expresion np_quitarFondo . np_print escritura3
    (56) np_print -> .

    COMA            reduce using rule 56 (np_print -> .)
    CPAREN          reduce using rule 56 (np_print -> .)

    np_print                       shift and go to state 253

state 220

    (52) escritura2 -> STRING np_printStr escritura3 .

    CPAREN          reduce using rule 52 (escritura2 -> STRING np_printStr escritura3 .)


state 221

    (53) escritura3 -> empty .

    CPAREN          reduce using rule 53 (escritura3 -> empty .)


state 222

    (54) escritura3 -> COMA . np_agregarFondo expresion np_quitarFondo np_print escritura3
    (55) escritura3 -> COMA . STRING np_printStr escritura3
    (126) np_agregarFondo -> .

    STRING          shift and go to state 255
    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 254

state 223

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo . np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo . np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (60) np_iniciaIf -> .

    CPAREN          reduce using rule 60 (np_iniciaIf -> .)

    np_iniciaIf                    shift and go to state 256

state 224

    (19) declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .

    VAR             reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    FUNCION         reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    PRINCIPAL       reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    REGRESA         reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    DESDE           reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    MIENTRAS        reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    LEE             reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    ESCRIBE         reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    SI              reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    ID              reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    CBRACKET        reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)
    OBRACKET        reduce using rule 19 (declaracion3 -> ASSIGN np_insertarOperador expresion np_quitarFondo COMA declaracion2 .)


state 225

    (80) expresion -> expresion LOGIC np_insertarOperador expresion .
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion

  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for RELOP resolved as shift
    SEMICOLON       reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    COMA            reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    CPAREN          reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    CCORCH          reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    HAZ             reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .)
    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155

  ! LOGIC           [ reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .) ]
  ! RELOP           [ reduce using rule 80 (expresion -> expresion LOGIC np_insertarOperador expresion .) ]


state 226

    (81) expresion -> expresion RELOP np_insertarOperador expresion .
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion

  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for RELOP resolved as shift
    SEMICOLON       reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .)
    COMA            reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .)
    CPAREN          reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .)
    CCORCH          reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .)
    HAZ             reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .)
    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155

  ! LOGIC           [ reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .) ]
  ! RELOP           [ reduce using rule 81 (expresion -> expresion RELOP np_insertarOperador expresion .) ]


state 227

    (83) termino -> termino PLUS np_insertarOperador termino .
    (83) termino -> termino . PLUS np_insertarOperador termino
    (84) termino -> termino . MINUS np_insertarOperador termino
    (85) termino -> termino . MULTIPLY np_insertarOperador termino
    (86) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    MINUS           reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    LOGIC           reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    RELOP           reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    SEMICOLON       reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    COMA            reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    CPAREN          reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    CCORCH          reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    HAZ             reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .)
    MULTIPLY        shift and go to state 158
    DIVIDE          shift and go to state 159

  ! MULTIPLY        [ reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .) ]
  ! DIVIDE          [ reduce using rule 83 (termino -> termino PLUS np_insertarOperador termino .) ]
  ! PLUS            [ shift and go to state 156 ]
  ! MINUS           [ shift and go to state 157 ]


state 228

    (84) termino -> termino MINUS np_insertarOperador termino .
    (83) termino -> termino . PLUS np_insertarOperador termino
    (84) termino -> termino . MINUS np_insertarOperador termino
    (85) termino -> termino . MULTIPLY np_insertarOperador termino
    (86) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    MINUS           reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    LOGIC           reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    RELOP           reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    SEMICOLON       reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    COMA            reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    CPAREN          reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    CCORCH          reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    HAZ             reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .)
    MULTIPLY        shift and go to state 158
    DIVIDE          shift and go to state 159

  ! MULTIPLY        [ reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .) ]
  ! DIVIDE          [ reduce using rule 84 (termino -> termino MINUS np_insertarOperador termino .) ]
  ! PLUS            [ shift and go to state 156 ]
  ! MINUS           [ shift and go to state 157 ]


state 229

    (85) termino -> termino MULTIPLY np_insertarOperador termino .
    (83) termino -> termino . PLUS np_insertarOperador termino
    (84) termino -> termino . MINUS np_insertarOperador termino
    (85) termino -> termino . MULTIPLY np_insertarOperador termino
    (86) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    MINUS           reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    MULTIPLY        reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    DIVIDE          reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    LOGIC           reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    RELOP           reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    SEMICOLON       reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    COMA            reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    CPAREN          reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    CCORCH          reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)
    HAZ             reduce using rule 85 (termino -> termino MULTIPLY np_insertarOperador termino .)

  ! PLUS            [ shift and go to state 156 ]
  ! MINUS           [ shift and go to state 157 ]
  ! MULTIPLY        [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]


state 230

    (86) termino -> termino DIVIDE np_insertarOperador termino .
    (83) termino -> termino . PLUS np_insertarOperador termino
    (84) termino -> termino . MINUS np_insertarOperador termino
    (85) termino -> termino . MULTIPLY np_insertarOperador termino
    (86) termino -> termino . DIVIDE np_insertarOperador termino

    PLUS            reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    MINUS           reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    MULTIPLY        reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    DIVIDE          reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    LOGIC           reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    RELOP           reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    SEMICOLON       reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    COMA            reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    CPAREN          reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    CCORCH          reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)
    HAZ             reduce using rule 86 (termino -> termino DIVIDE np_insertarOperador termino .)

  ! PLUS            [ shift and go to state 156 ]
  ! MINUS           [ shift and go to state 157 ]
  ! MULTIPLY        [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]


state 231

    (94) termino1 -> OPAREN np_insertarOperador expresion CPAREN . np_insertarOperador
    (87) np_insertarOperador -> .

    OPMATRIZ        reduce using rule 87 (np_insertarOperador -> .)
    PLUS            reduce using rule 87 (np_insertarOperador -> .)
    MINUS           reduce using rule 87 (np_insertarOperador -> .)
    MULTIPLY        reduce using rule 87 (np_insertarOperador -> .)
    DIVIDE          reduce using rule 87 (np_insertarOperador -> .)
    LOGIC           reduce using rule 87 (np_insertarOperador -> .)
    RELOP           reduce using rule 87 (np_insertarOperador -> .)
    SEMICOLON       reduce using rule 87 (np_insertarOperador -> .)
    COMA            reduce using rule 87 (np_insertarOperador -> .)
    CPAREN          reduce using rule 87 (np_insertarOperador -> .)
    CCORCH          reduce using rule 87 (np_insertarOperador -> .)
    HAZ             reduce using rule 87 (np_insertarOperador -> .)

    np_insertarOperador            shift and go to state 257

state 232

    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT . np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT . np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
    (102) np_asignarDimensionX -> .

    CCORCH          reduce using rule 102 (np_asignarDimensionX -> .)
    COMA            reduce using rule 102 (np_asignarDimensionX -> .)

    np_asignarDimensionX           shift and go to state 258

state 233

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 259


state 234

    (28) declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 28 (declaracionFuncionParametros -> INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 235

    (31) declaracionFuncionParametros2 -> empty .

    CPAREN          reduce using rule 31 (declaracionFuncionParametros2 -> empty .)


state 236

    (32) declaracionFuncionParametros2 -> COMA . INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> COMA . FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> COMA . CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2

    INT             shift and go to state 260
    FLOAT           shift and go to state 261
    CHAR            shift and go to state 262


state 237

    (29) declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 29 (declaracionFuncionParametros -> CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 238

    (30) declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 30 (declaracionFuncionParametros -> FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 239

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 263


state 240

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 264


state 241

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos . CBRACKET np_endFunc

    CBRACKET        shift and go to state 265


state 242

    (114) return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .

    REGRESA         reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    VAR             reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    DESDE           reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    MIENTRAS        reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    LEE             reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    ESCRIBE         reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    SI              reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    ID              reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)
    CBRACKET        reduce using rule 114 (return -> REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return .)


state 243

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo . expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 266
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 244

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 . CPAREN np_quitarFondoParam np_goSUB

    CPAREN          shift and go to state 267


state 245

    (69) paramsLlamada1 -> empty .

    CPAREN          reduce using rule 69 (paramsLlamada1 -> empty .)


state 246

    (70) paramsLlamada1 -> paramsLlamada2 .

    CPAREN          reduce using rule 70 (paramsLlamada1 -> paramsLlamada2 .)


state 247

    (71) paramsLlamada2 -> np_agregarFondo . expresion np_quitarFondo np_resolverParam
    (72) paramsLlamada2 -> np_agregarFondo . expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 268
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 248

    (97) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion . np_quitarFondo CCORCH
    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion . np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    CCORCH          reduce using rule 127 (np_quitarFondo -> .)
    COMA            reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 269

state 249

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo . CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    CPAREN          shift and go to state 270


state 250

    (75) lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN . SEMICOLON

    SEMICOLON       shift and go to state 271


state 251

    (77) lectura2 -> COMA posibleID . np_read lectura2
    (78) np_read -> .

    COMA            reduce using rule 78 (np_read -> .)
    CPAREN          reduce using rule 78 (np_read -> .)

    np_read                        shift and go to state 272

state 252

    (79) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion . np_quitarFondo np_quitarFondo SEMICOLON
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    SEMICOLON       reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 273

state 253

    (51) escritura2 -> np_agregarFondo expresion np_quitarFondo np_print . escritura3
    (53) escritura3 -> . empty
    (54) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (55) escritura3 -> . COMA STRING np_printStr escritura3
    (129) empty -> .

    COMA            shift and go to state 222
    CPAREN          reduce using rule 129 (empty -> .)

    escritura3                     shift and go to state 274
    empty                          shift and go to state 221

state 254

    (54) escritura3 -> COMA np_agregarFondo . expresion np_quitarFondo np_print escritura3
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 275
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 255

    (55) escritura3 -> COMA STRING . np_printStr escritura3
    (57) np_printStr -> .

    COMA            reduce using rule 57 (np_printStr -> .)
    CPAREN          reduce using rule 57 (np_printStr -> .)

    np_printStr                    shift and go to state 276

state 256

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf . CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf . CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf

    CPAREN          shift and go to state 277


state 257

    (94) termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .

    OPMATRIZ        reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    PLUS            reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    MINUS           reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    MULTIPLY        reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    DIVIDE          reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    LOGIC           reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    RELOP           reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    SEMICOLON       reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    COMA            reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    CPAREN          reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    CCORCH          reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)
    HAZ             reduce using rule 94 (termino1 -> OPAREN np_insertarOperador expresion CPAREN np_insertarOperador .)


state 258

    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX . CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX . COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    CCORCH          shift and go to state 278
    COMA            shift and go to state 279


state 259

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 280

state 260

    (32) declaracionFuncionParametros2 -> COMA INT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 281

state 261

    (33) declaracionFuncionParametros2 -> COMA FLOAT . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 282

state 262

    (34) declaracionFuncionParametros2 -> COMA CHAR . np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (14) np_defineTipo -> .

    ID              reduce using rule 14 (np_defineTipo -> .)

    np_defineTipo                  shift and go to state 283

state 263

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 284

state 264

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 285

state 265

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET . np_endFunc
    (26) np_endFunc -> .

    FUNCION         reduce using rule 26 (np_endFunc -> .)
    PRINCIPAL       reduce using rule 26 (np_endFunc -> .)

    np_endFunc                     shift and go to state 286

state 266

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion . np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    HAZ             reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 287

state 267

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN . np_quitarFondoParam np_goSUB
    (68) np_quitarFondoParam -> .

    SEMICOLON       reduce using rule 68 (np_quitarFondoParam -> .)
    OPMATRIZ        reduce using rule 68 (np_quitarFondoParam -> .)
    PLUS            reduce using rule 68 (np_quitarFondoParam -> .)
    MINUS           reduce using rule 68 (np_quitarFondoParam -> .)
    MULTIPLY        reduce using rule 68 (np_quitarFondoParam -> .)
    DIVIDE          reduce using rule 68 (np_quitarFondoParam -> .)
    LOGIC           reduce using rule 68 (np_quitarFondoParam -> .)
    RELOP           reduce using rule 68 (np_quitarFondoParam -> .)
    COMA            reduce using rule 68 (np_quitarFondoParam -> .)
    CPAREN          reduce using rule 68 (np_quitarFondoParam -> .)
    CCORCH          reduce using rule 68 (np_quitarFondoParam -> .)
    HAZ             reduce using rule 68 (np_quitarFondoParam -> .)

    np_quitarFondoParam            shift and go to state 288

state 268

    (71) paramsLlamada2 -> np_agregarFondo expresion . np_quitarFondo np_resolverParam
    (72) paramsLlamada2 -> np_agregarFondo expresion . np_quitarFondo np_resolverParam COMA paramsLlamada2
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 289

state 269

    (97) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo . CCORCH
    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo . COMA np_agregarFondo expresion np_quitarFondo CCORCH

    CCORCH          shift and go to state 290
    COMA            shift and go to state 291


state 270

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN . HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    HAZ             shift and go to state 292


state 271

    (75) lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .

    REGRESA         reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    VAR             reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    DESDE           reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    LEE             reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    SI              reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    ID              reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)
    CBRACKET        reduce using rule 75 (lectura -> LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON .)


state 272

    (77) lectura2 -> COMA posibleID np_read . lectura2
    (76) lectura2 -> . empty
    (77) lectura2 -> . COMA posibleID np_read lectura2
    (129) empty -> .

    COMA            shift and go to state 216
    CPAREN          reduce using rule 129 (empty -> .)

    lectura2                       shift and go to state 293
    empty                          shift and go to state 215

state 273

    (79) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo . np_quitarFondo SEMICOLON
    (127) np_quitarFondo -> .

    SEMICOLON       reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 294

state 274

    (51) escritura2 -> np_agregarFondo expresion np_quitarFondo np_print escritura3 .

    CPAREN          reduce using rule 51 (escritura2 -> np_agregarFondo expresion np_quitarFondo np_print escritura3 .)


state 275

    (54) escritura3 -> COMA np_agregarFondo expresion . np_quitarFondo np_print escritura3
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 295

state 276

    (55) escritura3 -> COMA STRING np_printStr . escritura3
    (53) escritura3 -> . empty
    (54) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (55) escritura3 -> . COMA STRING np_printStr escritura3
    (129) empty -> .

    COMA            shift and go to state 222
    CPAREN          reduce using rule 129 (empty -> .)

    escritura3                     shift and go to state 296
    empty                          shift and go to state 221

state 277

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN . ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN . ENTONCES OBRACKET estatutos CBRACKET np_terminaIf

    ENTONCES        shift and go to state 297


state 278

    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH . np_asignarMemoria1
    (104) np_asignarMemoria1 -> .

    ASSIGN          reduce using rule 104 (np_asignarMemoria1 -> .)
    SEMICOLON       reduce using rule 104 (np_asignarMemoria1 -> .)
    COMA            reduce using rule 104 (np_asignarMemoria1 -> .)
    CPAREN          reduce using rule 104 (np_asignarMemoria1 -> .)

    np_asignarMemoria1             shift and go to state 298

state 279

    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA . ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ENTERO          shift and go to state 299


state 280

    (20) declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 20 (declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 20 (declaracionFuncion -> FUNCION VOID ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 281

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 300

state 282

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 301

state 283

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo . np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (126) np_agregarFondo -> .

    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 302

state 284

    (21) declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 21 (declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 21 (declaracionFuncion -> FUNCION INT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros np_yaNoEsParametro CPAREN declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 285

    (22) declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 22 (declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 22 (declaracionFuncion -> FUNCION FLOAT ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 286

    (23) declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .

    FUNCION         reduce using rule 23 (declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)
    PRINCIPAL       reduce using rule 23 (declaracionFuncion -> FUNCION CHAR ID np_declfunc OPAREN np_esParametro declaracionFuncionParametros CPAREN np_yaNoEsParametro declaracionFuncionVariables OBRACKET estatutos CBRACKET np_endFunc .)


state 287

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo . np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (108) np_forFalso -> .

    HAZ             reduce using rule 108 (np_forFalso -> .)

    np_forFalso                    shift and go to state 303

state 288

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam . np_goSUB
    (74) np_goSUB -> .

    SEMICOLON       reduce using rule 74 (np_goSUB -> .)
    OPMATRIZ        reduce using rule 74 (np_goSUB -> .)
    PLUS            reduce using rule 74 (np_goSUB -> .)
    MINUS           reduce using rule 74 (np_goSUB -> .)
    MULTIPLY        reduce using rule 74 (np_goSUB -> .)
    DIVIDE          reduce using rule 74 (np_goSUB -> .)
    LOGIC           reduce using rule 74 (np_goSUB -> .)
    RELOP           reduce using rule 74 (np_goSUB -> .)
    COMA            reduce using rule 74 (np_goSUB -> .)
    CPAREN          reduce using rule 74 (np_goSUB -> .)
    CCORCH          reduce using rule 74 (np_goSUB -> .)
    HAZ             reduce using rule 74 (np_goSUB -> .)

    np_goSUB                       shift and go to state 304

state 289

    (71) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo . np_resolverParam
    (72) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo . np_resolverParam COMA paramsLlamada2
    (73) np_resolverParam -> .

    COMA            reduce using rule 73 (np_resolverParam -> .)
    CPAREN          reduce using rule 73 (np_resolverParam -> .)

    np_resolverParam               shift and go to state 305

state 290

    (97) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .

    ASSIGN          reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    OPMATRIZ        reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    PLUS            reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    MINUS           reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    MULTIPLY        reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    DIVIDE          reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    LOGIC           reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    RELOP           reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    SEMICOLON       reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    COMA            reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    CPAREN          reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    CCORCH          reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)
    HAZ             reduce using rule 97 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH .)


state 291

    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA . np_agregarFondo expresion np_quitarFondo CCORCH
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 306

state 292

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ . OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina

    OBRACKET        shift and go to state 307


state 293

    (77) lectura2 -> COMA posibleID np_read lectura2 .

    CPAREN          reduce using rule 77 (lectura2 -> COMA posibleID np_read lectura2 .)


state 294

    (79) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo . SEMICOLON

    SEMICOLON       shift and go to state 308


state 295

    (54) escritura3 -> COMA np_agregarFondo expresion np_quitarFondo . np_print escritura3
    (56) np_print -> .

    COMA            reduce using rule 56 (np_print -> .)
    CPAREN          reduce using rule 56 (np_print -> .)

    np_print                       shift and go to state 309

state 296

    (55) escritura3 -> COMA STRING np_printStr escritura3 .

    CPAREN          reduce using rule 55 (escritura3 -> COMA STRING np_printStr escritura3 .)


state 297

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES . OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES . OBRACKET estatutos CBRACKET np_terminaIf

    OBRACKET        shift and go to state 310


state 298

    (100) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1 .

    ASSIGN          reduce using rule 100 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1 .)
    SEMICOLON       reduce using rule 100 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1 .)
    COMA            reduce using rule 100 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1 .)
    CPAREN          reduce using rule 100 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1 .)


state 299

    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO . np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2
    (119) np_addConstanteINT -> .

    CCORCH          reduce using rule 119 (np_addConstanteINT -> .)

    np_addConstanteINT             shift and go to state 311

state 300

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 312

state 301

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 313

state 302

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo . posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (99) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones
    (100) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX CCORCH np_asignarMemoria1
    (101) posibleIDDeclaracion -> . ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2

    ID              shift and go to state 50

    posibleIDDeclaracion           shift and go to state 314

state 303

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso . HAZ OBRACKET estatutos CBRACKET np_terminaFor

    HAZ             shift and go to state 315


state 304

    (64) llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .

    SEMICOLON       reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    OPMATRIZ        reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    PLUS            reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    MINUS           reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    MULTIPLY        reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    DIVIDE          reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    LOGIC           reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    RELOP           reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    COMA            reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    CPAREN          reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    CCORCH          reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)
    HAZ             reduce using rule 64 (llamadaFuncion -> ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB .)


state 305

    (71) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam .
    (72) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam . COMA paramsLlamada2

    CPAREN          reduce using rule 71 (paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam .)
    COMA            shift and go to state 316


state 306

    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo . expresion np_quitarFondo CCORCH
    (80) expresion -> . expresion LOGIC np_insertarOperador expresion
    (81) expresion -> . expresion RELOP np_insertarOperador expresion
    (82) expresion -> . termino
    (83) termino -> . termino PLUS np_insertarOperador termino
    (84) termino -> . termino MINUS np_insertarOperador termino
    (85) termino -> . termino MULTIPLY np_insertarOperador termino
    (86) termino -> . termino DIVIDE np_insertarOperador termino
    (88) termino -> . termino1 OPMATRIZ np_insertarOperador
    (89) termino -> . termino1
    (90) termino1 -> . posibleID
    (91) termino1 -> . ENTERO np_addConstanteINT np_enviarACuadruplosC
    (92) termino1 -> . FLOTANTE np_addConstanteFLOAT np_enviarACuadruplosC
    (93) termino1 -> . llamadaFuncion
    (94) termino1 -> . OPAREN np_insertarOperador expresion CPAREN np_insertarOperador
    (95) termino1 -> . QUOT CARACTER QUOT
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB

    ENTERO          shift and go to state 123
    FLOTANTE        shift and go to state 124
    OPAREN          shift and go to state 126
    QUOT            shift and go to state 127
    ID              shift and go to state 128

    expresion                      shift and go to state 317
    termino                        shift and go to state 120
    termino1                       shift and go to state 121
    posibleID                      shift and go to state 122
    llamadaFuncion                 shift and go to state 125

state 307

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET . npWhileInicia estatutos CBRACKET npWhileTermina
    (112) npWhileInicia -> .

    REGRESA         reduce using rule 112 (npWhileInicia -> .)
    VAR             reduce using rule 112 (npWhileInicia -> .)
    DESDE           reduce using rule 112 (npWhileInicia -> .)
    MIENTRAS        reduce using rule 112 (npWhileInicia -> .)
    LEE             reduce using rule 112 (npWhileInicia -> .)
    ESCRIBE         reduce using rule 112 (npWhileInicia -> .)
    SI              reduce using rule 112 (npWhileInicia -> .)
    ID              reduce using rule 112 (npWhileInicia -> .)
    CBRACKET        reduce using rule 112 (npWhileInicia -> .)

    npWhileInicia                  shift and go to state 318

state 308

    (79) asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .

    REGRESA         reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    VAR             reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    DESDE           reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    MIENTRAS        reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    LEE             reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    ESCRIBE         reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    SI              reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    ID              reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)
    CBRACKET        reduce using rule 79 (asignacion -> posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON .)


state 309

    (54) escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print . escritura3
    (53) escritura3 -> . empty
    (54) escritura3 -> . COMA np_agregarFondo expresion np_quitarFondo np_print escritura3
    (55) escritura3 -> . COMA STRING np_printStr escritura3
    (129) empty -> .

    COMA            shift and go to state 222
    CPAREN          reduce using rule 129 (empty -> .)

    escritura3                     shift and go to state 319
    empty                          shift and go to state 221

state 310

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET . estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET . estatutos CBRACKET np_terminaIf
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 320
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 311

    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT . np_asignarDimensionY CCORCH np_asignarMemoria2
    (103) np_asignarDimensionY -> .

    CCORCH          reduce using rule 103 (np_asignarDimensionY -> .)

    np_asignarDimensionY           shift and go to state 321

state 312

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (127) np_quitarFondo -> .

    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 322

state 313

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (127) np_quitarFondo -> .

    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 323

state 314

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion . np_quitarFondo declaracionFuncionParametros2
    (127) np_quitarFondo -> .

    COMA            reduce using rule 127 (np_quitarFondo -> .)
    CPAREN          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 324

state 315

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ . OBRACKET estatutos CBRACKET np_terminaFor

    OBRACKET        shift and go to state 325


state 316

    (72) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA . paramsLlamada2
    (71) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam
    (72) paramsLlamada2 -> . np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2
    (126) np_agregarFondo -> .

    ENTERO          reduce using rule 126 (np_agregarFondo -> .)
    FLOTANTE        reduce using rule 126 (np_agregarFondo -> .)
    OPAREN          reduce using rule 126 (np_agregarFondo -> .)
    QUOT            reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 247
    paramsLlamada2                 shift and go to state 326

state 317

    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion . np_quitarFondo CCORCH
    (80) expresion -> expresion . LOGIC np_insertarOperador expresion
    (81) expresion -> expresion . RELOP np_insertarOperador expresion
    (127) np_quitarFondo -> .

    LOGIC           shift and go to state 154
    RELOP           shift and go to state 155
    CCORCH          reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 327

state 318

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia . estatutos CBRACKET npWhileTermina
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 328
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 319

    (54) escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print escritura3 .

    CPAREN          reduce using rule 54 (escritura3 -> COMA np_agregarFondo expresion np_quitarFondo np_print escritura3 .)


state 320

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos . CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos . CBRACKET np_terminaIf

    CBRACKET        shift and go to state 329


state 321

    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY . CCORCH np_asignarMemoria2

    CCORCH          shift and go to state 330


state 322

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    COMA            shift and go to state 236
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 331
    empty                          shift and go to state 235

state 323

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    COMA            shift and go to state 236
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 332
    empty                          shift and go to state 235

state 324

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo . declaracionFuncionParametros2
    (31) declaracionFuncionParametros2 -> . empty
    (32) declaracionFuncionParametros2 -> . COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (33) declaracionFuncionParametros2 -> . COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (34) declaracionFuncionParametros2 -> . COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2
    (129) empty -> .

    COMA            shift and go to state 236
    CPAREN          reduce using rule 129 (empty -> .)

    declaracionFuncionParametros2  shift and go to state 333
    empty                          shift and go to state 235

state 325

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET . estatutos CBRACKET np_terminaFor
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 334
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 326

    (72) paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2 .

    CPAREN          reduce using rule 72 (paramsLlamada2 -> np_agregarFondo expresion np_quitarFondo np_resolverParam COMA paramsLlamada2 .)


state 327

    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo . CCORCH

    CCORCH          shift and go to state 335


state 328

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos . CBRACKET npWhileTermina

    CBRACKET        shift and go to state 336


state 329

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET . SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET . np_terminaIf
    (61) np_terminaIf -> .

    SINO            shift and go to state 337
    REGRESA         reduce using rule 61 (np_terminaIf -> .)
    VAR             reduce using rule 61 (np_terminaIf -> .)
    DESDE           reduce using rule 61 (np_terminaIf -> .)
    MIENTRAS        reduce using rule 61 (np_terminaIf -> .)
    LEE             reduce using rule 61 (np_terminaIf -> .)
    ESCRIBE         reduce using rule 61 (np_terminaIf -> .)
    SI              reduce using rule 61 (np_terminaIf -> .)
    ID              reduce using rule 61 (np_terminaIf -> .)
    CBRACKET        reduce using rule 61 (np_terminaIf -> .)

    np_terminaIf                   shift and go to state 338

state 330

    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH . np_asignarMemoria2
    (105) np_asignarMemoria2 -> .

    ASSIGN          reduce using rule 105 (np_asignarMemoria2 -> .)
    SEMICOLON       reduce using rule 105 (np_asignarMemoria2 -> .)
    COMA            reduce using rule 105 (np_asignarMemoria2 -> .)
    CPAREN          reduce using rule 105 (np_asignarMemoria2 -> .)

    np_asignarMemoria2             shift and go to state 339

state 331

    (32) declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 32 (declaracionFuncionParametros2 -> COMA INT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 332

    (33) declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 33 (declaracionFuncionParametros2 -> COMA FLOAT np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 333

    (34) declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .

    CPAREN          reduce using rule 34 (declaracionFuncionParametros2 -> COMA CHAR np_defineTipo np_agregarFondo posibleIDDeclaracion np_quitarFondo declaracionFuncionParametros2 .)


state 334

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos . CBRACKET np_terminaFor

    CBRACKET        shift and go to state 340


state 335

    (98) posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .

    ASSIGN          reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    OPMATRIZ        reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    PLUS            reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    MINUS           reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    MULTIPLY        reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    DIVIDE          reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    LOGIC           reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    RELOP           reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    SEMICOLON       reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    COMA            reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    CPAREN          reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    CCORCH          reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)
    HAZ             reduce using rule 98 (posibleID -> ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH .)


state 336

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET . npWhileTermina
    (113) npWhileTermina -> .

    REGRESA         reduce using rule 113 (npWhileTermina -> .)
    VAR             reduce using rule 113 (npWhileTermina -> .)
    DESDE           reduce using rule 113 (npWhileTermina -> .)
    MIENTRAS        reduce using rule 113 (npWhileTermina -> .)
    LEE             reduce using rule 113 (npWhileTermina -> .)
    ESCRIBE         reduce using rule 113 (npWhileTermina -> .)
    SI              reduce using rule 113 (npWhileTermina -> .)
    ID              reduce using rule 113 (npWhileTermina -> .)
    CBRACKET        reduce using rule 113 (npWhileTermina -> .)

    npWhileTermina                 shift and go to state 341

state 337

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO . OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET

    OBRACKET        shift and go to state 342


state 338

    (59) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .

    REGRESA         reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    VAR             reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    DESDE           reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    MIENTRAS        reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    LEE             reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    ESCRIBE         reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    SI              reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    ID              reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)
    CBRACKET        reduce using rule 59 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf .)


state 339

    (101) posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2 .

    ASSIGN          reduce using rule 101 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2 .)
    SEMICOLON       reduce using rule 101 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2 .)
    COMA            reduce using rule 101 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2 .)
    CPAREN          reduce using rule 101 (posibleIDDeclaracion -> ID np_addVariable np_enviarACuadruplos np_actualizarDimensiones OCORCH ENTERO np_addConstanteINT np_asignarDimensionX COMA ENTERO np_addConstanteINT np_asignarDimensionY CCORCH np_asignarMemoria2 .)


state 340

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET . np_terminaFor
    (109) np_terminaFor -> .

    REGRESA         reduce using rule 109 (np_terminaFor -> .)
    VAR             reduce using rule 109 (np_terminaFor -> .)
    DESDE           reduce using rule 109 (np_terminaFor -> .)
    MIENTRAS        reduce using rule 109 (np_terminaFor -> .)
    LEE             reduce using rule 109 (np_terminaFor -> .)
    ESCRIBE         reduce using rule 109 (np_terminaFor -> .)
    SI              reduce using rule 109 (np_terminaFor -> .)
    ID              reduce using rule 109 (np_terminaFor -> .)
    CBRACKET        reduce using rule 109 (np_terminaFor -> .)

    np_terminaFor                  shift and go to state 343

state 341

    (110) estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .

    REGRESA         reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    VAR             reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    DESDE           reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    MIENTRAS        reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    LEE             reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    ESCRIBE         reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    SI              reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    ID              reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)
    CBRACKET        reduce using rule 110 (estatutoRepeticionCondicional -> MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina .)


state 342

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET . np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (62) np_iniciaElse -> .

    REGRESA         reduce using rule 62 (np_iniciaElse -> .)
    VAR             reduce using rule 62 (np_iniciaElse -> .)
    DESDE           reduce using rule 62 (np_iniciaElse -> .)
    MIENTRAS        reduce using rule 62 (np_iniciaElse -> .)
    LEE             reduce using rule 62 (np_iniciaElse -> .)
    ESCRIBE         reduce using rule 62 (np_iniciaElse -> .)
    SI              reduce using rule 62 (np_iniciaElse -> .)
    ID              reduce using rule 62 (np_iniciaElse -> .)
    CBRACKET        reduce using rule 62 (np_iniciaElse -> .)

    np_iniciaElse                  shift and go to state 344

state 343

    (106) estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .

    REGRESA         reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    VAR             reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    DESDE           reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    MIENTRAS        reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    LEE             reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    ESCRIBE         reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    SI              reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    ID              reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)
    CBRACKET        reduce using rule 106 (estatutoRepeticionIncondicional -> DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor .)


state 344

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse . np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (126) np_agregarFondo -> .

    REGRESA         reduce using rule 126 (np_agregarFondo -> .)
    VAR             reduce using rule 126 (np_agregarFondo -> .)
    DESDE           reduce using rule 126 (np_agregarFondo -> .)
    MIENTRAS        reduce using rule 126 (np_agregarFondo -> .)
    LEE             reduce using rule 126 (np_agregarFondo -> .)
    ESCRIBE         reduce using rule 126 (np_agregarFondo -> .)
    SI              reduce using rule 126 (np_agregarFondo -> .)
    ID              reduce using rule 126 (np_agregarFondo -> .)
    CBRACKET        reduce using rule 126 (np_agregarFondo -> .)

    np_agregarFondo                shift and go to state 345

state 345

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo . estatutos np_quitarFondo np_terminaElse CBRACKET
    (39) estatutos -> . return estatutos
    (40) estatutos -> . empty
    (41) estatutos -> . declaracion estatutos
    (42) estatutos -> . estatutoRepeticionIncondicional estatutos
    (43) estatutos -> . estatutoRepeticionCondicional estatutos
    (44) estatutos -> . lectura estatutos
    (45) estatutos -> . asignacion estatutos
    (46) estatutos -> . escritura estatutos
    (47) estatutos -> . decision estatutos
    (48) estatutos -> . llamadaFuncion SEMICOLON estatutos
    (114) return -> . REGRESA np_agregarFondo expresion np_quitarFondo SEMICOLON np_return
    (115) return -> . REGRESA SEMICOLON np_returnVOID
    (129) empty -> .
    (11) declaracion -> . VAR INT np_defineTipo COLON declaracion2
    (12) declaracion -> . VAR FLOAT np_defineTipo COLON declaracion2
    (13) declaracion -> . VAR CHAR np_defineTipo COLON declaracion2
    (106) estatutoRepeticionIncondicional -> . DESDE ID np_contieneID HASTA np_iniciaFor np_agregarFondo expresion np_quitarFondo np_forFalso HAZ OBRACKET estatutos CBRACKET np_terminaFor
    (110) estatutoRepeticionCondicional -> . MIENTRAS OPAREN np_agregarFondo npWhileStExp expresion np_quitarFondo CPAREN HAZ OBRACKET npWhileInicia estatutos CBRACKET npWhileTermina
    (75) lectura -> . LEE OPAREN posibleID np_read lectura2 CPAREN SEMICOLON
    (79) asignacion -> . posibleID np_agregarFondo ASSIGN np_insertarOperador np_agregarFondo expresion np_quitarFondo np_quitarFondo SEMICOLON
    (49) escritura -> . ESCRIBE OPAREN escritura2 CPAREN SEMICOLON
    (58) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET
    (59) decision -> . SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET np_terminaIf
    (64) llamadaFuncion -> . ID np_existeFuncion np_llamadaFuncion np_agregarFondoParam OPAREN paramsLlamada1 CPAREN np_quitarFondoParam np_goSUB
    (96) posibleID -> . ID np_contieneID np_enviarACuadruplos
    (97) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo CCORCH
    (98) posibleID -> . ID np_contieneID np_enviarACuadruplos OCORCH np_agregarFondo expresion np_quitarFondo COMA np_agregarFondo expresion np_quitarFondo CCORCH

    REGRESA         shift and go to state 79
    CBRACKET        reduce using rule 129 (empty -> .)
    VAR             shift and go to state 8
    DESDE           shift and go to state 80
    MIENTRAS        shift and go to state 82
    LEE             shift and go to state 83
    ESCRIBE         shift and go to state 85
    SI              shift and go to state 86
    ID              shift and go to state 81

    estatutos                      shift and go to state 346
    return                         shift and go to state 69
    empty                          shift and go to state 70
    declaracion                    shift and go to state 71
    estatutoRepeticionIncondicional shift and go to state 72
    estatutoRepeticionCondicional  shift and go to state 73
    lectura                        shift and go to state 74
    asignacion                     shift and go to state 75
    escritura                      shift and go to state 76
    decision                       shift and go to state 77
    llamadaFuncion                 shift and go to state 78
    posibleID                      shift and go to state 84

state 346

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos . np_quitarFondo np_terminaElse CBRACKET
    (127) np_quitarFondo -> .

    CBRACKET        reduce using rule 127 (np_quitarFondo -> .)

    np_quitarFondo                 shift and go to state 347

state 347

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo . np_terminaElse CBRACKET
    (63) np_terminaElse -> .

    CBRACKET        reduce using rule 63 (np_terminaElse -> .)

    np_terminaElse                 shift and go to state 348

state 348

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse . CBRACKET

    CBRACKET        shift and go to state 349


state 349

    (58) decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .

    REGRESA         reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    VAR             reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    DESDE           reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    MIENTRAS        reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    LEE             reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    ESCRIBE         reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    SI              reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    ID              reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)
    CBRACKET        reduce using rule 58 (decision -> SI OPAREN np_agregarFondo expresion np_quitarFondo np_iniciaIf CPAREN ENTONCES OBRACKET estatutos CBRACKET SINO OBRACKET np_iniciaElse np_agregarFondo estatutos np_quitarFondo np_terminaElse CBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOGIC in state 225 resolved as shift
WARNING: shift/reduce conflict for RELOP in state 225 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 226 resolved as shift
WARNING: shift/reduce conflict for RELOP in state 226 resolved as shift
