Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    CBRACKET
    HASTA
    CCORCH
    HAZ
    COMENTARIO
    NUMBER
    OBRACKET
    ENTONCES
    REGRESA
    VOID
    DESDE
    OCORCH
    ESCRIBE
    SI
    LEE
    MIENTRAS
    ASSIGN
    SINO
    IGNORE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA ID SEMICOLON programa2
Rule 2     programa2 -> declaracion programa2
Rule 3     programa2 -> programa3
Rule 4     programa3 -> declaracionFuncion programa3
Rule 5     programa3 -> principal
Rule 6     principal -> PRINCIPAL
Rule 7     declaracion -> VAR INT COLON
Rule 8     declaracion -> VAR FLOAT COLON
Rule 9     declaracion -> VAR CHAR COLON
Rule 10    declaracionFuncion -> FUNCION
Rule 11    expresion -> expresion LOGIC expresion
Rule 12    expresion -> expresion RELOP expresion
Rule 13    expresion -> termino1 OPMATRIZ
Rule 14    expresion -> termino
Rule 15    termino -> termino PLUS termino
Rule 16    termino -> termino MINUS termino
Rule 17    termino -> termino MULTIPLY termino
Rule 18    termino -> termino DIVIDE termino
Rule 19    termino -> termino1 OPMATRIZ
Rule 20    termino -> termino1
Rule 21    termino1 -> ID
Rule 22    termino1 -> ENTERO
Rule 23    termino1 -> FLOTANTE
Rule 24    termino1 -> CARACTER
Rule 25    termino1 -> LPAREN expresion RPAREN

Terminals, with rules where they appear

ASSIGN               : 
CARACTER             : 24
CBRACKET             : 
CCORCH               : 
CHAR                 : 9
COLON                : 7 8 9
COMENTARIO           : 
DESDE                : 
DIVIDE               : 18
ENTERO               : 22
ENTONCES             : 
ESCRIBE              : 
FLOAT                : 8
FLOTANTE             : 23
FUNCION              : 10
HASTA                : 
HAZ                  : 
ID                   : 1 21
IGNORE               : 
INT                  : 7
LEE                  : 
LOGIC                : 11
LPAREN               : 25
MIENTRAS             : 
MINUS                : 16
MULTIPLY             : 17
NEWLINE              : 
NUMBER               : 
OBRACKET             : 
OCORCH               : 
OPMATRIZ             : 13 19
PLUS                 : 15
PRINCIPAL            : 6
PROGRAMA             : 1
REGRESA              : 
RELOP                : 12
RPAREN               : 25
SEMICOLON            : 1
SI                   : 
SINO                 : 
VAR                  : 7 8 9
VOID                 : 
error                : 

Nonterminals, with rules where they appear

declaracion          : 2
declaracionFuncion   : 4
expresion            : 11 11 12 12 25
principal            : 5
programa             : 0
programa2            : 1 2
programa3            : 3 4
termino              : 14 15 15 16 16 17 17 18 18
termino1             : 13 19 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA ID SEMICOLON programa2

    PROGRAMA        shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAMA . ID SEMICOLON programa2

    ID              shift and go to state 3


state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAMA ID . SEMICOLON programa2

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAMA ID SEMICOLON . programa2
    (2) programa2 -> . declaracion programa2
    (3) programa2 -> . programa3
    (7) declaracion -> . VAR INT COLON
    (8) declaracion -> . VAR FLOAT COLON
    (9) declaracion -> . VAR CHAR COLON
    (4) programa3 -> . declaracionFuncion programa3
    (5) programa3 -> . principal
    (10) declaracionFuncion -> . FUNCION
    (6) principal -> . PRINCIPAL

    VAR             shift and go to state 6
    FUNCION         shift and go to state 5
    PRINCIPAL       shift and go to state 8

    principal                      shift and go to state 11
    declaracion                    shift and go to state 10
    declaracionFuncion             shift and go to state 9
    programa3                      shift and go to state 12
    programa2                      shift and go to state 7

state 5

    (10) declaracionFuncion -> FUNCION .

    FUNCION         reduce using rule 10 (declaracionFuncion -> FUNCION .)
    PRINCIPAL       reduce using rule 10 (declaracionFuncion -> FUNCION .)


state 6

    (7) declaracion -> VAR . INT COLON
    (8) declaracion -> VAR . FLOAT COLON
    (9) declaracion -> VAR . CHAR COLON

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 13


state 7

    (1) programa -> PROGRAMA ID SEMICOLON programa2 .

    $end            reduce using rule 1 (programa -> PROGRAMA ID SEMICOLON programa2 .)


state 8

    (6) principal -> PRINCIPAL .

    $end            reduce using rule 6 (principal -> PRINCIPAL .)


state 9

    (4) programa3 -> declaracionFuncion . programa3
    (4) programa3 -> . declaracionFuncion programa3
    (5) programa3 -> . principal
    (10) declaracionFuncion -> . FUNCION
    (6) principal -> . PRINCIPAL

    FUNCION         shift and go to state 5
    PRINCIPAL       shift and go to state 8

    principal                      shift and go to state 11
    programa3                      shift and go to state 16
    declaracionFuncion             shift and go to state 9

state 10

    (2) programa2 -> declaracion . programa2
    (2) programa2 -> . declaracion programa2
    (3) programa2 -> . programa3
    (7) declaracion -> . VAR INT COLON
    (8) declaracion -> . VAR FLOAT COLON
    (9) declaracion -> . VAR CHAR COLON
    (4) programa3 -> . declaracionFuncion programa3
    (5) programa3 -> . principal
    (10) declaracionFuncion -> . FUNCION
    (6) principal -> . PRINCIPAL

    VAR             shift and go to state 6
    FUNCION         shift and go to state 5
    PRINCIPAL       shift and go to state 8

    principal                      shift and go to state 11
    declaracion                    shift and go to state 10
    declaracionFuncion             shift and go to state 9
    programa3                      shift and go to state 12
    programa2                      shift and go to state 17

state 11

    (5) programa3 -> principal .

    $end            reduce using rule 5 (programa3 -> principal .)


state 12

    (3) programa2 -> programa3 .

    $end            reduce using rule 3 (programa2 -> programa3 .)


state 13

    (9) declaracion -> VAR CHAR . COLON

    COLON           shift and go to state 18


state 14

    (7) declaracion -> VAR INT . COLON

    COLON           shift and go to state 19


state 15

    (8) declaracion -> VAR FLOAT . COLON

    COLON           shift and go to state 20


state 16

    (4) programa3 -> declaracionFuncion programa3 .

    $end            reduce using rule 4 (programa3 -> declaracionFuncion programa3 .)


state 17

    (2) programa2 -> declaracion programa2 .

    $end            reduce using rule 2 (programa2 -> declaracion programa2 .)


state 18

    (9) declaracion -> VAR CHAR COLON .

    VAR             reduce using rule 9 (declaracion -> VAR CHAR COLON .)
    FUNCION         reduce using rule 9 (declaracion -> VAR CHAR COLON .)
    PRINCIPAL       reduce using rule 9 (declaracion -> VAR CHAR COLON .)


state 19

    (7) declaracion -> VAR INT COLON .

    VAR             reduce using rule 7 (declaracion -> VAR INT COLON .)
    FUNCION         reduce using rule 7 (declaracion -> VAR INT COLON .)
    PRINCIPAL       reduce using rule 7 (declaracion -> VAR INT COLON .)


state 20

    (8) declaracion -> VAR FLOAT COLON .

    VAR             reduce using rule 8 (declaracion -> VAR FLOAT COLON .)
    FUNCION         reduce using rule 8 (declaracion -> VAR FLOAT COLON .)
    PRINCIPAL       reduce using rule 8 (declaracion -> VAR FLOAT COLON .)

