PROGRAMA p;
VAR INT: ad, c[2,2], arr[3];
VAR FLOAT: a[2,3], d[5,5], cd, cf[2,2], b[3,2];
VAR CHAR: e[1,1];

FUNCION INT fibonacciRecursivo(INT n){

  SI (n == 0) ENTONCES{
      REGRESA 0;
  }

  SI (n == 1) ENTONCES{
      REGRESA 1;
  }

  SI (n == 2) ENTONCES{
      REGRESA 1;
  }

  REGRESA fibonacciRecursivo(n - 1) + fibonacciRecursivo(n - 2);
}

FUNCION INT fibonacciIterativo(INT n)
VAR INT: i = 3;
{
  SI (n == 0) ENTONCES{
      REGRESA 0;
  }

  SI (n == 1) ENTONCES{
      REGRESA 1;
  }

  VAR INT: fib[11];

  fib[0] = 1;
  fib[1] = 1;
  fib[2] = 1;
  DESDE i HASTA n+1 HAZ{
    fib[i] = fib[i-1]+fib[i-2];
  }

  REGRESA fib[n];
}

PRINCIPAL(){
    VAR INT: i = 0, j = 0;

    DESDE i HASTA 2 HAZ{ %%Inicializar matriz con dimensiones 2,3
      DESDE j HASTA 3 HAZ{
          a[i,j] = i*3.0+j;%%Se le asigna un valor incremental empezando en 0
      }
      j = 0;
    }

    i = 0;
    DESDE i HASTA 2 HAZ{%%Inicializar matriz con dimensiones 2,2
      DESDE j HASTA 2 HAZ{
          c[i,j] = i*2+j;%%Se le asigna un valor incremental empezando en 0
      }
      j = 0;
    }

    %%Probar transpuesta
    b = aยก;
    ESCRIBE("Matriz transpuesta:",b);

    %%Probar determinante con una matriz no cuadrada
    %%ad = a$;
    %%ESCRIBE("Determinante no cuadruado:",ad);

    %%Probar determinante con matriz cuadrada
    cd = c$;
    ESCRIBE("Determinante:",cd);

    %%Probar la inversa de una matriz cuadrada
    cf = c?;
    ESCRIBE("Inversa:",cf);

    %%Probar caso extremo
    ESCRIBE("Extremo!");
    b = 1.0;
    ESCRIBE(b);
    b = (c?*a)ยก+b*2.0;
    ESCRIBE(b);

    arr = 3;
    ESCRIBE("EXITO!");
}
