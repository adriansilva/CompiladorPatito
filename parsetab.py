
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftOPMATRIZASSIGN CARACTER CBRACKET CCORCH CHAR COLON COMA COMENTARIO CPAREN DESDE DIVIDE ENTERO ENTONCES ESCRIBE FLOAT FLOTANTE FUNCION HASTA HAZ ID IGNORE INT LEE LOGIC MIENTRAS MINUS MULTIPLY NEWLINE NUMBER OBRACKET OCORCH OPAREN OPMATRIZ PLUS PRINCIPAL PROGRAMA REGRESA RELOP SEMICOLON SI SINO VAR VOID\n    programa : PROGRAMA ID SEMICOLON programa2\n    \n    programa2 : declaracion programa2\n              | programa3\n    \n    programa3 : declaracionFuncion programa3\n              | principal\n    \n    principal : PRINCIPAL OPAREN CPAREN OBRACKET principal1 CBRACKET\n    \n    principal1 : estatutos principal1\n               | empty\n    \n    declaracion : VAR INT COLON declaracion2\n                | VAR FLOAT COLON declaracion2\n                | VAR CHAR COLON declaracion2\n    \n    declaracion2 : SEMICOLON\n    \n    declaracion2 : ID declaracion3\n    \n    declaracion3 : SEMICOLON\n    \n    declaracion3 : COMA declaracion2\n    \n    declaracion3 : ASSIGN expresion SEMICOLON\n    \n    declaracion3 : ASSIGN expresion COMA declaracion2\n    \n    declaracionFuncion : FUNCION\n    \n    asignacion : ID ASSIGN expresion SEMICOLON\n    \n    expresion : expresion LOGIC expresion\n              | expresion RELOP expresion\n    \n    expresion : termino1 OPMATRIZ\n    \n    expresion : termino\n    \n    termino : termino PLUS termino\n            | termino MINUS termino\n            | termino MULTIPLY termino\n            | termino DIVIDE termino\n    \n        termino : termino1 OPMATRIZ\n        \n    termino : termino1\n    \n    termino1 : ID\n             | ENTERO\n             | FLOTANTE\n             | CARACTER\n    \n    termino1 : OPAREN expresion CPAREN\n    \n    estatutos : estatutoRepeticionIncondicional\n    \n    estatutoRepeticionIncondicional : DESDE ID ASSIGN expresion HASTA expresion HAZ OBRACKET CBRACKET\n    \n    empty :\n    '
    
_lr_action_items = {'DESDE':([23,29,31,76,],[33,33,-35,-36,]),'FLOTANTE':([36,43,50,52,53,54,55,57,59,71,],[42,42,42,42,42,42,42,42,42,42,]),'INT':([12,],[18,]),'OPAREN':([6,36,43,50,52,53,54,55,57,59,71,],[13,43,43,43,43,43,43,43,43,43,43,]),'CARACTER':([36,43,50,52,53,54,55,57,59,71,],[44,44,44,44,44,44,44,44,44,44,]),'MULTIPLY':([42,44,45,47,48,49,60,62,63,64,65,66,67,72,],[-32,-33,52,-30,-31,-29,-28,-34,-26,-29,52,-27,52,-28,]),'FLOAT':([12,],[16,]),'CBRACKET':([23,29,30,31,32,38,75,76,],[-37,-37,39,-35,-8,-7,76,-36,]),'CHAR':([12,],[17,]),'DIVIDE':([42,44,45,47,48,49,60,62,63,64,65,66,67,72,],[-32,-33,54,-30,-31,-29,-28,-34,-26,-29,54,-27,54,-28,]),'HAZ':([42,44,45,47,48,49,60,62,63,64,65,66,67,69,70,72,73,],[-32,-33,-23,-30,-31,-29,-22,-34,-26,-29,-24,-27,-25,-21,-20,-28,74,]),'ASSIGN':([25,40,],[36,50,]),'PLUS':([42,44,45,47,48,49,60,62,63,64,65,66,67,72,],[-32,-33,53,-30,-31,-29,-28,-34,-26,-29,-24,-27,-25,-28,]),'RELOP':([42,44,45,46,47,48,49,51,60,61,62,63,64,65,66,67,69,70,72,73,],[-32,-33,-23,57,-30,-31,-29,57,-22,57,-34,-26,-29,-24,-27,-25,57,57,-28,57,]),'COLON':([16,17,18,],[20,21,22,]),'OBRACKET':([19,74,],[23,75,]),'FUNCION':([4,5,8,11,24,26,27,28,35,37,41,58,68,],[5,-18,5,5,-12,-10,-11,-9,-13,-14,-15,-16,-17,]),'OPMATRIZ':([42,44,47,48,49,62,64,],[-32,-33,-30,-31,60,-34,72,]),'SEMICOLON':([3,20,21,22,25,34,42,44,45,46,47,48,49,56,60,62,63,64,65,66,67,69,70,72,],[4,24,24,24,37,24,-32,-33,-23,58,-30,-31,-29,24,-22,-34,-26,-29,-24,-27,-25,-21,-20,-28,]),'PROGRAMA':([0,],[2,]),'LOGIC':([42,44,45,46,47,48,49,51,60,61,62,63,64,65,66,67,69,70,72,73,],[-32,-33,-23,59,-30,-31,-29,59,-22,59,-34,-26,-29,-24,-27,-25,59,59,-28,59,]),'PRINCIPAL':([4,5,8,11,24,26,27,28,35,37,41,58,68,],[6,-18,6,6,-12,-10,-11,-9,-13,-14,-15,-16,-17,]),'HASTA':([42,44,45,47,48,49,60,61,62,63,64,65,66,67,69,70,72,],[-32,-33,-23,-30,-31,-29,-22,71,-34,-26,-29,-24,-27,-25,-21,-20,-28,]),'COMA':([25,42,44,45,46,47,48,49,60,62,63,64,65,66,67,69,70,72,],[34,-32,-33,-23,56,-30,-31,-29,-22,-34,-26,-29,-24,-27,-25,-21,-20,-28,]),'$end':([1,7,9,10,14,15,39,],[0,-3,-1,-5,-4,-2,-6,]),'MINUS':([42,44,45,47,48,49,60,62,63,64,65,66,67,72,],[-32,-33,55,-30,-31,-29,-28,-34,-26,-29,-24,-27,-25,-28,]),'VAR':([4,11,24,26,27,28,35,37,41,58,68,],[12,12,-12,-10,-11,-9,-13,-14,-15,-16,-17,]),'ID':([2,20,21,22,33,34,36,43,50,52,53,54,55,56,57,59,71,],[3,25,25,25,40,25,47,47,47,47,47,47,47,25,47,47,47,]),'ENTERO':([36,43,50,52,53,54,55,57,59,71,],[48,48,48,48,48,48,48,48,48,48,]),'CPAREN':([13,42,44,45,47,48,49,51,60,62,63,64,65,66,67,69,70,72,],[19,-32,-33,-23,-30,-31,-29,62,-22,-34,-26,-29,-24,-27,-25,-21,-20,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'estatutos':([23,29,],[29,29,]),'declaracion3':([25,],[35,]),'declaracionFuncion':([4,8,11,],[8,8,8,]),'programa3':([4,8,11,],[7,14,7,]),'programa':([0,],[1,]),'principal1':([23,29,],[30,38,]),'estatutoRepeticionIncondicional':([23,29,],[31,31,]),'programa2':([4,11,],[9,15,]),'principal':([4,8,11,],[10,10,10,]),'declaracion':([4,11,],[11,11,]),'termino1':([36,43,50,52,53,54,55,57,59,71,],[49,49,49,64,64,64,64,49,49,49,]),'expresion':([36,43,50,57,59,71,],[46,51,61,69,70,73,]),'declaracion2':([20,21,22,34,56,],[26,27,28,41,68,]),'empty':([23,29,],[32,32,]),'termino':([36,43,50,52,53,54,55,57,59,71,],[45,45,45,63,65,66,67,45,45,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAMA ID SEMICOLON programa2','programa',4,'p_programa','yaccPatito.py',27),
  ('programa2 -> declaracion programa2','programa2',2,'p_programa2','yaccPatito.py',33),
  ('programa2 -> programa3','programa2',1,'p_programa2','yaccPatito.py',34),
  ('programa3 -> declaracionFuncion programa3','programa3',2,'p_programa3','yaccPatito.py',41),
  ('programa3 -> principal','programa3',1,'p_programa3','yaccPatito.py',42),
  ('principal -> PRINCIPAL OPAREN CPAREN OBRACKET principal1 CBRACKET','principal',6,'p_principal','yaccPatito.py',48),
  ('principal1 -> estatutos principal1','principal1',2,'p_principal1','yaccPatito.py',54),
  ('principal1 -> empty','principal1',1,'p_principal1','yaccPatito.py',55),
  ('declaracion -> VAR INT COLON declaracion2','declaracion',4,'p_declaracion','yaccPatito.py',60),
  ('declaracion -> VAR FLOAT COLON declaracion2','declaracion',4,'p_declaracion','yaccPatito.py',61),
  ('declaracion -> VAR CHAR COLON declaracion2','declaracion',4,'p_declaracion','yaccPatito.py',62),
  ('declaracion2 -> SEMICOLON','declaracion2',1,'p_declaracion2_1','yaccPatito.py',68),
  ('declaracion2 -> ID declaracion3','declaracion2',2,'p_declaracion2_2','yaccPatito.py',74),
  ('declaracion3 -> SEMICOLON','declaracion3',1,'p_declaracion3_1','yaccPatito.py',80),
  ('declaracion3 -> COMA declaracion2','declaracion3',2,'p_declaracion3_2','yaccPatito.py',86),
  ('declaracion3 -> ASSIGN expresion SEMICOLON','declaracion3',3,'p_declaracion3_3','yaccPatito.py',92),
  ('declaracion3 -> ASSIGN expresion COMA declaracion2','declaracion3',4,'p_declaracion3_4','yaccPatito.py',98),
  ('declaracionFuncion -> FUNCION','declaracionFuncion',1,'p_declaracionFuncion','yaccPatito.py',104),
  ('asignacion -> ID ASSIGN expresion SEMICOLON','asignacion',4,'p_asignacion_4','yaccPatito.py',109),
  ('expresion -> expresion LOGIC expresion','expresion',3,'p_expresion_3','yaccPatito.py',114),
  ('expresion -> expresion RELOP expresion','expresion',3,'p_expresion_3','yaccPatito.py',115),
  ('expresion -> termino1 OPMATRIZ','expresion',2,'p_expresion_2','yaccPatito.py',121),
  ('expresion -> termino','expresion',1,'p_expresion_1','yaccPatito.py',127),
  ('termino -> termino PLUS termino','termino',3,'p_termino_3','yaccPatito.py',143),
  ('termino -> termino MINUS termino','termino',3,'p_termino_3','yaccPatito.py',144),
  ('termino -> termino MULTIPLY termino','termino',3,'p_termino_3','yaccPatito.py',145),
  ('termino -> termino DIVIDE termino','termino',3,'p_termino_3','yaccPatito.py',146),
  ('termino -> termino1 OPMATRIZ','termino',2,'p_termino_2','yaccPatito.py',170),
  ('termino -> termino1','termino',1,'p_termino_1','yaccPatito.py',176),
  ('termino1 -> ID','termino1',1,'p_termino1_1','yaccPatito.py',182),
  ('termino1 -> ENTERO','termino1',1,'p_termino1_1','yaccPatito.py',183),
  ('termino1 -> FLOTANTE','termino1',1,'p_termino1_1','yaccPatito.py',184),
  ('termino1 -> CARACTER','termino1',1,'p_termino1_1','yaccPatito.py',185),
  ('termino1 -> OPAREN expresion CPAREN','termino1',3,'p_termino1_3','yaccPatito.py',191),
  ('estatutos -> estatutoRepeticionIncondicional','estatutos',1,'p_estatutos','yaccPatito.py',197),
  ('estatutoRepeticionIncondicional -> DESDE ID ASSIGN expresion HASTA expresion HAZ OBRACKET CBRACKET','estatutoRepeticionIncondicional',9,'p_estatutoRepeticionIncondicional','yaccPatito.py',202),
  ('empty -> <empty>','empty',0,'p_empty','yaccPatito.py',210),
]
