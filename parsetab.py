
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftOPMATRIZASSIGN CARACTER CBRACKET COMENTARIO DESDE DIVIDE ENTERO ENTONCES ESCRIBE FLOAT FLOTANTE FUNCION HASTA HAZ ID IGNORE INT LEE LOGIC LPAREN MIENTRAS MINUS MULTIPLY NEWLINE NUMBER OBRACKET OPMATRIZ PLUS PRINCIPAL PROGRAMA REGRESA RELOP RPAREN SEMICOLON SI SINO VAR VOID\n    expresion : expresion LOGIC expresion\n              | termino RELOP expresion\n              | termino\n    \n    termino : termino1\n            | termino PLUS termino\n            | termino MINUS termino\n            | termino MULTIPLY termino\n            | termino DIVIDE termino\n    \n    termino1 : ID\n             | ID OPMATRIZ\n             | ENTERO\n             | FLOTANTE\n             | CARACTER\n             | LPAREN expresion RPAREN\n    '

_lr_action_items = {'LPAREN':([0,1,10,11,12,13,14,16,],[1,1,1,1,1,1,1,1,]),'PLUS':([2,3,4,5,6,7,15,17,18,19,21,22,],[-13,-11,11,-4,-9,-12,-10,-14,-6,-5,-7,-8,]),'CARACTER':([0,1,10,11,12,13,14,16,],[2,2,2,2,2,2,2,2,]),'RPAREN':([2,3,4,5,6,7,9,15,17,18,19,20,21,22,23,],[-13,-11,-3,-4,-9,-12,17,-10,-14,-6,-5,-2,-7,-8,-1,]),'DIVIDE':([2,3,4,5,6,7,15,17,18,19,21,22,],[-13,-11,14,-4,-9,-12,-10,-14,14,14,-7,-8,]),'FLOTANTE':([0,1,10,11,12,13,14,16,],[7,7,7,7,7,7,7,7,]),'ID':([0,1,10,11,12,13,14,16,],[6,6,6,6,6,6,6,6,]),'OPMATRIZ':([6,],[15,]),'$end':([2,3,4,5,6,7,8,15,17,18,19,20,21,22,23,],[-13,-11,-3,-4,-9,-12,0,-10,-14,-6,-5,-2,-7,-8,-1,]),'MULTIPLY':([2,3,4,5,6,7,15,17,18,19,21,22,],[-13,-11,13,-4,-9,-12,-10,-14,13,13,-7,-8,]),'MINUS':([2,3,4,5,6,7,15,17,18,19,21,22,],[-13,-11,10,-4,-9,-12,-10,-14,-6,-5,-7,-8,]),'LOGIC':([2,3,4,5,6,7,8,9,15,17,18,19,20,21,22,23,],[-13,-11,-3,-4,-9,-12,16,16,-10,-14,-6,-5,16,-7,-8,16,]),'RELOP':([2,3,4,5,6,7,15,17,18,19,21,22,],[-13,-11,12,-4,-9,-12,-10,-14,-6,-5,-7,-8,]),'ENTERO':([0,1,10,11,12,13,14,16,],[3,3,3,3,3,3,3,3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion':([0,1,12,16,],[8,9,20,23,]),'termino1':([0,1,10,11,12,13,14,16,],[5,5,5,5,5,5,5,5,]),'termino':([0,1,10,11,12,13,14,16,],[4,4,18,19,4,21,22,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion","S'",1,None,None,None),
  ('expresion -> expresion LOGIC expresion','expresion',3,'p_expresion','patito++.py',270),
  ('expresion -> termino RELOP expresion','expresion',3,'p_expresion','patito++.py',271),
  ('expresion -> termino','expresion',1,'p_expresion','patito++.py',272),
  ('termino -> termino1','termino',1,'p_termino','patito++.py',295),
  ('termino -> termino PLUS termino','termino',3,'p_termino','patito++.py',296),
  ('termino -> termino MINUS termino','termino',3,'p_termino','patito++.py',297),
  ('termino -> termino MULTIPLY termino','termino',3,'p_termino','patito++.py',298),
  ('termino -> termino DIVIDE termino','termino',3,'p_termino','patito++.py',299),
  ('termino1 -> ID','termino1',1,'p_termino1','patito++.py',310),
  ('termino1 -> ID OPMATRIZ','termino1',2,'p_termino1','patito++.py',311),
  ('termino1 -> ENTERO','termino1',1,'p_termino1','patito++.py',312),
  ('termino1 -> FLOTANTE','termino1',1,'p_termino1','patito++.py',313),
  ('termino1 -> CARACTER','termino1',1,'p_termino1','patito++.py',314),
  ('termino1 -> LPAREN expresion RPAREN','termino1',3,'p_termino1','patito++.py',315),
]
